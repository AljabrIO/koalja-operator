/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package github.com.AljabrIO.koalja_operator.pkg.apis.koalja.v1alpha1;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";
import "sigs.k8s.io/controller-runtime/pkg/runtime/scheme/generated.proto";

// Package-wide variables from generator "generated".
option (gogoproto.marshaler_all) = true;
option (gogoproto.stable_marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_enum_prefix_all) = false;
option (gogoproto.goproto_getters_all) = false;
option go_package = "v1alpha1";

// LinkSourceSpec holds the specification
message LinkSourceSpec {
  // Type of source
  optional string type = 1 [(gogoproto.casttype) = "LinkSourceType", (gogoproto.customname) = "Type", (gogoproto.nullable) = false];
}

// LinkSpec holds the specification of a single link between tasks
message LinkSpec {
  // Name of the link
  optional string name = 1 [(gogoproto.customname) = "Name", (gogoproto.nullable) = false];

  // SourceRef specifies the source of the link as `taskName/outputName`.
  optional string sourceRef = 2 [(gogoproto.customname) = "SourceRef", (gogoproto.nullable) = false];

  // DestinationRef specifies the destination of the link as `taskName/inputName`
  optional string destinationRef = 3 [(gogoproto.customname) = "DestinationRef", (gogoproto.nullable) = false];
}

// Pipeline is the Schema for the pipelines API
// +k8s:openapi-gen=true
message Pipeline {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1 [(gogoproto.customname) = "ObjectMeta", (gogoproto.nullable) = false];

  optional PipelineSpec spec = 2 [(gogoproto.customname) = "Spec", (gogoproto.nullable) = false];

  optional PipelineStatus status = 3 [(gogoproto.customname) = "Status", (gogoproto.nullable) = false];
}

// PipelineList contains a list of Pipeline
message PipelineList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1 [(gogoproto.customname) = "ListMeta", (gogoproto.nullable) = false];

  repeated Pipeline items = 2 [(gogoproto.customname) = "Items", (gogoproto.nullable) = false];
}

// PipelineRevision stores the specification of a Pipeline at a specific moment in time.
// +k8s:openapi-gen=true
message PipelineRevision {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1 [(gogoproto.customname) = "ObjectMeta", (gogoproto.nullable) = false];

  // Hash of the specification
  optional string hash = 2 [(gogoproto.customname) = "Hash", (gogoproto.nullable) = false];

  // Specification of the pipeline at the time of this revision
  optional PipelineSpec spec = 3 [(gogoproto.customname) = "Spec", (gogoproto.nullable) = false];
}

// PipelineRevisionList contains a list of PipelineRevision
message PipelineRevisionList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1 [(gogoproto.customname) = "ListMeta", (gogoproto.nullable) = false];

  repeated PipelineRevision items = 2 [(gogoproto.customname) = "Items", (gogoproto.nullable) = false];
}

// PipelineSpec defines the desired state of Pipeline
message PipelineSpec {
  // Tasks of the pipeline
  repeated TaskSpec tasks = 1 [(gogoproto.customname) = "Tasks", (gogoproto.nullable) = false];

  // Links between tasks of the pipeline
  repeated LinkSpec links = 2 [(gogoproto.customname) = "Links", (gogoproto.nullable) = false];

  // Types of input/output data of tasks
  repeated TypeSpec types = 3 [(gogoproto.customname) = "Types", (gogoproto.nullable) = false];
}

// PipelineStatus defines the observed state of Pipeline
message PipelineStatus {
  // Domain name used for the pipeline
  optional string domain = 1 [(gogoproto.customname) = "Domain", (gogoproto.nullable) = false];

  // Revision hash of the current specification of the pipeline
  optional string revision = 2 [(gogoproto.customname) = "Revision", (gogoproto.nullable) = false];
}

// TaskInputSpec holds the specification of a single input of a task.
message TaskInputSpec {
  // Name of the input
  optional string name = 1 [(gogoproto.customname) = "Name", (gogoproto.nullable) = false];

  // Reference to the type of the input
  optional string typeRef = 2 [(gogoproto.customname) = "TypeRef", (gogoproto.nullable) = false];

  // RequiredSequenceLength determines the minimum & maximum number of annotated values to fetch
  // before this input is considered ready for execution.
  // Semantics depend on the SnapshotPolicy of the task.
  // Defaults to 1.
  // If this value is set, MinSequenceLength & MaxSequenceLength are no longer used.
  optional int64 requiredSequenceLength = 6 [(gogoproto.customname) = "RequiredSequenceLength"];

  // MinSequenceLength determines the minimum number of annotated values to fetch
  // before this input is considered ready for execution.
  // Semantics depend on the SnapshotPolicy of the task.
  // Defaults to 1.
  optional int64 minSequenceLength = 4 [(gogoproto.customname) = "MinSequenceLength"];

  // MaxSequenceLength determines the maximum number of annotated values to fetch
  // before this input is considered ready for execution.
  // Semantics depend on the SnapshotPolicy of the task.
  // Defaults to MinSequenceLength.
  optional int64 maxSequenceLength = 5 [(gogoproto.customname) = "MaxSequenceLength"];

  // Slide specifies the maximum number of annotated values to slide
  // out of the current snapshot when task execution is done.
  // This property is not relevant when task.SnapshotPolicy != SlidingWindow.
  // Defaults to 1.
  optional int64 slide = 7 [(gogoproto.customname) = "Slide"];

  // MergeInto specifies the name of another input of this task.
  // If set, all annotated values that are coming in through this input are merge into
  // the stream of annotated values coming in to the link with that name.
  // Inputs that have MergeInto set will not yield any arguments for the task executor.
  optional string mergeInto = 8 [(gogoproto.customname) = "MergeInto", (gogoproto.nullable) = false];
}

// TaskOutputSpec holds the specification of a single output of a task
message TaskOutputSpec {
  // Name of the output
  optional string name = 1 [(gogoproto.customname) = "Name", (gogoproto.nullable) = false];

  // Reference to the type of the output
  optional string typeRef = 2 [(gogoproto.customname) = "TypeRef", (gogoproto.nullable) = false];

  // Ready indicates when this output is ready and available for the
  // next task in the pipeline.
  // Defaults to "Succeeded".
  optional string ready = 3 [(gogoproto.casttype) = "OutputReadiness", (gogoproto.customname) = "Ready", (gogoproto.nullable) = false];

  // Options is an optional set of key-value pairs used to pass data to a task executor.
  map<string, string> options = 4 [(gogoproto.customname) = "Options", (gogoproto.nullable) = false];
}

// TaskSpec holds the specification of a single task
message TaskSpec {
  // Name of the task
  optional string name = 1 [(gogoproto.customname) = "Name", (gogoproto.nullable) = false];

  // Type of task
  optional string type = 2 [(gogoproto.casttype) = "TaskType", (gogoproto.customname) = "Type", (gogoproto.nullable) = false];

  // Inputs of the task
  repeated TaskInputSpec inputs = 3 [(gogoproto.customname) = "Inputs", (gogoproto.nullable) = false];

  // Outputs of the task
  repeated TaskOutputSpec outputs = 4 [(gogoproto.customname) = "Outputs", (gogoproto.nullable) = false];

  // Executor holds the spec of the execution part of the task
  optional k8s.io.api.core.v1.Container executor = 5 [(gogoproto.customname) = "Executor"];

  // Policy determining how inputs are aggregated into snapshots
  optional string snapshotPolicy = 6 [(gogoproto.casttype) = "SnapshotPolicy", (gogoproto.customname) = "SnapshotPolicy", (gogoproto.nullable) = false];
}

// TypeSpec holds the specification of a single type of data
message TypeSpec {
  // Name of the type
  optional string name = 1 [(gogoproto.customname) = "Name", (gogoproto.nullable) = false];

  // Protocol indicating how to get to the data
  optional string protocol = 2 [(gogoproto.casttype) = "Protocol", (gogoproto.customname) = "Protocol", (gogoproto.nullable) = false];

  // Format of the content of the data
  optional string format = 3 [(gogoproto.casttype) = "Format", (gogoproto.customname) = "Format", (gogoproto.nullable) = false];
}

