/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package github.com.AljabrIO.koalja_operator.pkg.apis.koalja.v1alpha1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";
import "sigs.k8s.io/controller-runtime/pkg/runtime/scheme/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

// LinkSourceSpec holds the specification
message LinkSourceSpec {
  // Type of source
  optional string type = 1;
}

// LinkSpec holds the specification of a single link between tasks
message LinkSpec {
  // Name of the link
  optional string name = 1;

  // SourceRef specifies the source of the link as `taskName/outputName`.
  optional string sourceRef = 2;

  // DestinationRef specifies the destination of the link as `taskName/inputName`
  optional string destinationRef = 3;
}

// Pipeline is the Schema for the pipelines API
// +k8s:openapi-gen=true
message Pipeline {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional PipelineSpec spec = 2;

  optional PipelineStatus status = 3;
}

// PipelineList contains a list of Pipeline
message PipelineList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Pipeline items = 2;
}

// PipelineSpec defines the desired state of Pipeline
message PipelineSpec {
  // Tasks of the pipeline
  repeated TaskSpec tasks = 1;

  // Links between tasks of the pipeline
  repeated LinkSpec links = 2;

  // Types of input/output data of tasks
  repeated TypeSpec types = 3;
}

// PipelineStatus defines the observed state of Pipeline
message PipelineStatus {
}

// TaskInputSpec holds the specification of a single input of a task
message TaskInputSpec {
  // Name of the input
  optional string name = 1;

  // Reference to the type of the input
  optional string typeRef = 2;

  // SnapshotPolicy determines how to sample events into a tuple
  // that is the input for task execution.
  // Defaults to "All".
  optional string snapshotPolicy = 3;
}

// TaskOutputSpec holds the specification of a single output of a task
message TaskOutputSpec {
  // Name of the output
  optional string name = 1;

  // Reference to the type of the output
  optional string typeRef = 2;

  // Ready indicates when this output is ready and available for the
  // next task in the pipeline.
  // Defaults to "Succeeded".
  optional string ready = 3;
}

// TaskSpec holds the specification of a single task
message TaskSpec {
  // Name of the task
  optional string name = 1;

  // Type of task
  optional string type = 2;

  // Inputs of the task
  repeated TaskInputSpec inputs = 3;

  // Outputs of the task
  repeated TaskOutputSpec outputs = 4;

  // Executor holds the spec of the execution part of the task
  optional k8s.io.api.core.v1.Container executor = 5;
}

// TypeSpec holds the specification of a single type of data
message TypeSpec {
  // Name of the type
  optional string name = 1;

  // Protocol indicating how to get to the data
  optional string protocol = 2;

  // Format of the content of the data
  optional string format = 3;
}

