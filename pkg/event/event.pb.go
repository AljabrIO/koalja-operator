// Code generated by protoc-gen-go. DO NOT EDIT.
// source: event.proto

package event

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	empty "github.com/golang/protobuf/ptypes/empty"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PublishRequest struct {
	Event                *Event   `protobuf:"bytes,1,opt,name=Event,proto3" json:"Event,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishRequest) Reset()         { *m = PublishRequest{} }
func (m *PublishRequest) String() string { return proto.CompactTextString(m) }
func (*PublishRequest) ProtoMessage()    {}
func (*PublishRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d17a9d3f0ddf27e, []int{0}
}

func (m *PublishRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishRequest.Unmarshal(m, b)
}
func (m *PublishRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishRequest.Marshal(b, m, deterministic)
}
func (m *PublishRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishRequest.Merge(m, src)
}
func (m *PublishRequest) XXX_Size() int {
	return xxx_messageInfo_PublishRequest.Size(m)
}
func (m *PublishRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublishRequest proto.InternalMessageInfo

func (m *PublishRequest) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type PublishResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishResponse) Reset()         { *m = PublishResponse{} }
func (m *PublishResponse) String() string { return proto.CompactTextString(m) }
func (*PublishResponse) ProtoMessage()    {}
func (*PublishResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d17a9d3f0ddf27e, []int{1}
}

func (m *PublishResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishResponse.Unmarshal(m, b)
}
func (m *PublishResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishResponse.Marshal(b, m, deterministic)
}
func (m *PublishResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishResponse.Merge(m, src)
}
func (m *PublishResponse) XXX_Size() int {
	return xxx_messageInfo_PublishResponse.Size(m)
}
func (m *PublishResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PublishResponse proto.InternalMessageInfo

type SubscribeRequest struct {
	ClientID             string   `protobuf:"bytes,1,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeRequest) Reset()         { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()    {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d17a9d3f0ddf27e, []int{2}
}

func (m *SubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeRequest.Unmarshal(m, b)
}
func (m *SubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRequest.Merge(m, src)
}
func (m *SubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeRequest.Size(m)
}
func (m *SubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRequest proto.InternalMessageInfo

func (m *SubscribeRequest) GetClientID() string {
	if m != nil {
		return m.ClientID
	}
	return ""
}

type Subscription struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Subscription) Reset()         { *m = Subscription{} }
func (m *Subscription) String() string { return proto.CompactTextString(m) }
func (*Subscription) ProtoMessage()    {}
func (*Subscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d17a9d3f0ddf27e, []int{3}
}

func (m *Subscription) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Subscription.Unmarshal(m, b)
}
func (m *Subscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Subscription.Marshal(b, m, deterministic)
}
func (m *Subscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subscription.Merge(m, src)
}
func (m *Subscription) XXX_Size() int {
	return xxx_messageInfo_Subscription.Size(m)
}
func (m *Subscription) XXX_DiscardUnknown() {
	xxx_messageInfo_Subscription.DiscardUnknown(m)
}

var xxx_messageInfo_Subscription proto.InternalMessageInfo

func (m *Subscription) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type SubscribeResponse struct {
	Subscription         *Subscription      `protobuf:"bytes,1,opt,name=Subscription,proto3" json:"Subscription,omitempty"`
	TTL                  *duration.Duration `protobuf:"bytes,2,opt,name=TTL,proto3" json:"TTL,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *SubscribeResponse) Reset()         { *m = SubscribeResponse{} }
func (m *SubscribeResponse) String() string { return proto.CompactTextString(m) }
func (*SubscribeResponse) ProtoMessage()    {}
func (*SubscribeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d17a9d3f0ddf27e, []int{4}
}

func (m *SubscribeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeResponse.Unmarshal(m, b)
}
func (m *SubscribeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeResponse.Marshal(b, m, deterministic)
}
func (m *SubscribeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeResponse.Merge(m, src)
}
func (m *SubscribeResponse) XXX_Size() int {
	return xxx_messageInfo_SubscribeResponse.Size(m)
}
func (m *SubscribeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeResponse proto.InternalMessageInfo

func (m *SubscribeResponse) GetSubscription() *Subscription {
	if m != nil {
		return m.Subscription
	}
	return nil
}

func (m *SubscribeResponse) GetTTL() *duration.Duration {
	if m != nil {
		return m.TTL
	}
	return nil
}

type PingRequest struct {
	Subscription         *Subscription `protobuf:"bytes,1,opt,name=Subscription,proto3" json:"Subscription,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *PingRequest) Reset()         { *m = PingRequest{} }
func (m *PingRequest) String() string { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()    {}
func (*PingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d17a9d3f0ddf27e, []int{5}
}

func (m *PingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingRequest.Unmarshal(m, b)
}
func (m *PingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingRequest.Marshal(b, m, deterministic)
}
func (m *PingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingRequest.Merge(m, src)
}
func (m *PingRequest) XXX_Size() int {
	return xxx_messageInfo_PingRequest.Size(m)
}
func (m *PingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PingRequest proto.InternalMessageInfo

func (m *PingRequest) GetSubscription() *Subscription {
	if m != nil {
		return m.Subscription
	}
	return nil
}

type CloseRequest struct {
	Subscription         *Subscription `protobuf:"bytes,1,opt,name=Subscription,proto3" json:"Subscription,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *CloseRequest) Reset()         { *m = CloseRequest{} }
func (m *CloseRequest) String() string { return proto.CompactTextString(m) }
func (*CloseRequest) ProtoMessage()    {}
func (*CloseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d17a9d3f0ddf27e, []int{6}
}

func (m *CloseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloseRequest.Unmarshal(m, b)
}
func (m *CloseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloseRequest.Marshal(b, m, deterministic)
}
func (m *CloseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseRequest.Merge(m, src)
}
func (m *CloseRequest) XXX_Size() int {
	return xxx_messageInfo_CloseRequest.Size(m)
}
func (m *CloseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CloseRequest proto.InternalMessageInfo

func (m *CloseRequest) GetSubscription() *Subscription {
	if m != nil {
		return m.Subscription
	}
	return nil
}

type NextEventRequest struct {
	Subscription         *Subscription      `protobuf:"bytes,1,opt,name=Subscription,proto3" json:"Subscription,omitempty"`
	WaitTimeout          *duration.Duration `protobuf:"bytes,2,opt,name=WaitTimeout,proto3" json:"WaitTimeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *NextEventRequest) Reset()         { *m = NextEventRequest{} }
func (m *NextEventRequest) String() string { return proto.CompactTextString(m) }
func (*NextEventRequest) ProtoMessage()    {}
func (*NextEventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d17a9d3f0ddf27e, []int{7}
}

func (m *NextEventRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NextEventRequest.Unmarshal(m, b)
}
func (m *NextEventRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NextEventRequest.Marshal(b, m, deterministic)
}
func (m *NextEventRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NextEventRequest.Merge(m, src)
}
func (m *NextEventRequest) XXX_Size() int {
	return xxx_messageInfo_NextEventRequest.Size(m)
}
func (m *NextEventRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NextEventRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NextEventRequest proto.InternalMessageInfo

func (m *NextEventRequest) GetSubscription() *Subscription {
	if m != nil {
		return m.Subscription
	}
	return nil
}

func (m *NextEventRequest) GetWaitTimeout() *duration.Duration {
	if m != nil {
		return m.WaitTimeout
	}
	return nil
}

type NextEventResponse struct {
	Event                *Event   `protobuf:"bytes,1,opt,name=Event,proto3" json:"Event,omitempty"`
	NoEventYet           bool     `protobuf:"varint,2,opt,name=NoEventYet,proto3" json:"NoEventYet,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NextEventResponse) Reset()         { *m = NextEventResponse{} }
func (m *NextEventResponse) String() string { return proto.CompactTextString(m) }
func (*NextEventResponse) ProtoMessage()    {}
func (*NextEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d17a9d3f0ddf27e, []int{8}
}

func (m *NextEventResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NextEventResponse.Unmarshal(m, b)
}
func (m *NextEventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NextEventResponse.Marshal(b, m, deterministic)
}
func (m *NextEventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NextEventResponse.Merge(m, src)
}
func (m *NextEventResponse) XXX_Size() int {
	return xxx_messageInfo_NextEventResponse.Size(m)
}
func (m *NextEventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NextEventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NextEventResponse proto.InternalMessageInfo

func (m *NextEventResponse) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *NextEventResponse) GetNoEventYet() bool {
	if m != nil {
		return m.NoEventYet
	}
	return false
}

type AckEventRequest struct {
	Subscription         *Subscription `protobuf:"bytes,1,opt,name=Subscription,proto3" json:"Subscription,omitempty"`
	EventID              string        `protobuf:"bytes,2,opt,name=EventID,proto3" json:"EventID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *AckEventRequest) Reset()         { *m = AckEventRequest{} }
func (m *AckEventRequest) String() string { return proto.CompactTextString(m) }
func (*AckEventRequest) ProtoMessage()    {}
func (*AckEventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d17a9d3f0ddf27e, []int{9}
}

func (m *AckEventRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AckEventRequest.Unmarshal(m, b)
}
func (m *AckEventRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AckEventRequest.Marshal(b, m, deterministic)
}
func (m *AckEventRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AckEventRequest.Merge(m, src)
}
func (m *AckEventRequest) XXX_Size() int {
	return xxx_messageInfo_AckEventRequest.Size(m)
}
func (m *AckEventRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AckEventRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AckEventRequest proto.InternalMessageInfo

func (m *AckEventRequest) GetSubscription() *Subscription {
	if m != nil {
		return m.Subscription
	}
	return nil
}

func (m *AckEventRequest) GetEventID() string {
	if m != nil {
		return m.EventID
	}
	return ""
}

type Event struct {
	// ID is a unique ID of this event
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// SourceTask contains the URI of the task that created the event
	SourceTask string `protobuf:"bytes,2,opt,name=SourceTask,proto3" json:"SourceTask,omitempty"`
	// SourceTaskOutput contains the name of the output of the task that created the event
	SourceTaskOutput string `protobuf:"bytes,3,opt,name=SourceTaskOutput,proto3" json:"SourceTaskOutput,omitempty"`
	// Link contains the URI of the Link that published the event
	Link string `protobuf:"bytes,4,opt,name=Link,proto3" json:"Link,omitempty"`
	// SourceInputs contains zero or more URI's of events that resulted in this event
	SourceInputs []string `protobuf:"bytes,5,rep,name=SourceInputs,proto3" json:"SourceInputs,omitempty"`
	// Data contains a URI of the data (payload) of the message
	Data                 string   `protobuf:"bytes,6,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d17a9d3f0ddf27e, []int{10}
}

func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Event) GetSourceTask() string {
	if m != nil {
		return m.SourceTask
	}
	return ""
}

func (m *Event) GetSourceTaskOutput() string {
	if m != nil {
		return m.SourceTaskOutput
	}
	return ""
}

func (m *Event) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *Event) GetSourceInputs() []string {
	if m != nil {
		return m.SourceInputs
	}
	return nil
}

func (m *Event) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type GetEventByIDRequest struct {
	ID                   string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetEventByIDRequest) Reset()         { *m = GetEventByIDRequest{} }
func (m *GetEventByIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetEventByIDRequest) ProtoMessage()    {}
func (*GetEventByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d17a9d3f0ddf27e, []int{11}
}

func (m *GetEventByIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetEventByIDRequest.Unmarshal(m, b)
}
func (m *GetEventByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetEventByIDRequest.Marshal(b, m, deterministic)
}
func (m *GetEventByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEventByIDRequest.Merge(m, src)
}
func (m *GetEventByIDRequest) XXX_Size() int {
	return xxx_messageInfo_GetEventByIDRequest.Size(m)
}
func (m *GetEventByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEventByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetEventByIDRequest proto.InternalMessageInfo

func (m *GetEventByIDRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type GetEventByTaskAndDataRequest struct {
	SourceTask           string   `protobuf:"bytes,1,opt,name=SourceTask,proto3" json:"SourceTask,omitempty"`
	Data                 string   `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetEventByTaskAndDataRequest) Reset()         { *m = GetEventByTaskAndDataRequest{} }
func (m *GetEventByTaskAndDataRequest) String() string { return proto.CompactTextString(m) }
func (*GetEventByTaskAndDataRequest) ProtoMessage()    {}
func (*GetEventByTaskAndDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d17a9d3f0ddf27e, []int{12}
}

func (m *GetEventByTaskAndDataRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetEventByTaskAndDataRequest.Unmarshal(m, b)
}
func (m *GetEventByTaskAndDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetEventByTaskAndDataRequest.Marshal(b, m, deterministic)
}
func (m *GetEventByTaskAndDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEventByTaskAndDataRequest.Merge(m, src)
}
func (m *GetEventByTaskAndDataRequest) XXX_Size() int {
	return xxx_messageInfo_GetEventByTaskAndDataRequest.Size(m)
}
func (m *GetEventByTaskAndDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEventByTaskAndDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetEventByTaskAndDataRequest proto.InternalMessageInfo

func (m *GetEventByTaskAndDataRequest) GetSourceTask() string {
	if m != nil {
		return m.SourceTask
	}
	return ""
}

func (m *GetEventByTaskAndDataRequest) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type GetEventResponse struct {
	Event                *Event   `protobuf:"bytes,1,opt,name=Event,proto3" json:"Event,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetEventResponse) Reset()         { *m = GetEventResponse{} }
func (m *GetEventResponse) String() string { return proto.CompactTextString(m) }
func (*GetEventResponse) ProtoMessage()    {}
func (*GetEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d17a9d3f0ddf27e, []int{13}
}

func (m *GetEventResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetEventResponse.Unmarshal(m, b)
}
func (m *GetEventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetEventResponse.Marshal(b, m, deterministic)
}
func (m *GetEventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEventResponse.Merge(m, src)
}
func (m *GetEventResponse) XXX_Size() int {
	return xxx_messageInfo_GetEventResponse.Size(m)
}
func (m *GetEventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetEventResponse proto.InternalMessageInfo

func (m *GetEventResponse) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func init() {
	proto.RegisterType((*PublishRequest)(nil), "event.PublishRequest")
	proto.RegisterType((*PublishResponse)(nil), "event.PublishResponse")
	proto.RegisterType((*SubscribeRequest)(nil), "event.SubscribeRequest")
	proto.RegisterType((*Subscription)(nil), "event.Subscription")
	proto.RegisterType((*SubscribeResponse)(nil), "event.SubscribeResponse")
	proto.RegisterType((*PingRequest)(nil), "event.PingRequest")
	proto.RegisterType((*CloseRequest)(nil), "event.CloseRequest")
	proto.RegisterType((*NextEventRequest)(nil), "event.NextEventRequest")
	proto.RegisterType((*NextEventResponse)(nil), "event.NextEventResponse")
	proto.RegisterType((*AckEventRequest)(nil), "event.AckEventRequest")
	proto.RegisterType((*Event)(nil), "event.Event")
	proto.RegisterType((*GetEventByIDRequest)(nil), "event.GetEventByIDRequest")
	proto.RegisterType((*GetEventByTaskAndDataRequest)(nil), "event.GetEventByTaskAndDataRequest")
	proto.RegisterType((*GetEventResponse)(nil), "event.GetEventResponse")
}

func init() { proto.RegisterFile("event.proto", fileDescriptor_2d17a9d3f0ddf27e) }

var fileDescriptor_2d17a9d3f0ddf27e = []byte{
	// 685 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xdd, 0x4e, 0xdb, 0x4c,
	0x10, 0x55, 0x12, 0x02, 0x64, 0x92, 0x0f, 0xc2, 0x22, 0xc0, 0x9f, 0x55, 0x21, 0xb4, 0x55, 0x25,
	0xd4, 0x0a, 0x5b, 0x0a, 0xa8, 0xbf, 0x12, 0x12, 0x10, 0x8a, 0x52, 0x21, 0x40, 0x26, 0x15, 0x6a,
	0xef, 0xec, 0x64, 0x6b, 0x4c, 0x8c, 0xd7, 0xb5, 0xd7, 0x55, 0xf3, 0x06, 0x7d, 0x9b, 0x5e, 0xf4,
	0x85, 0xfa, 0x28, 0x95, 0xf7, 0xc7, 0xb1, 0x63, 0x22, 0xda, 0xd2, 0x9b, 0x68, 0x77, 0x66, 0xce,
	0x99, 0x33, 0xe3, 0x99, 0x0d, 0x34, 0xc9, 0x17, 0x12, 0x30, 0x23, 0x8c, 0x28, 0xa3, 0xa8, 0xce,
	0x2f, 0xfa, 0x2b, 0xd7, 0x63, 0xd7, 0x89, 0x63, 0x0c, 0xe8, 0xad, 0xe9, 0x52, 0xdf, 0x0e, 0x5c,
	0x93, 0xfb, 0x9d, 0xe4, 0x93, 0x19, 0xb2, 0x71, 0x48, 0x62, 0x73, 0x98, 0x44, 0x36, 0xf3, 0x68,
	0x90, 0x1d, 0x04, 0x83, 0xbe, 0x7b, 0x3f, 0x94, 0xdc, 0x86, 0x6c, 0x2c, 0x7e, 0x05, 0x08, 0xef,
	0xc1, 0xd2, 0x45, 0xe2, 0xf8, 0x5e, 0x7c, 0x6d, 0x91, 0xcf, 0x09, 0x89, 0x19, 0xc2, 0x50, 0x3f,
	0x4e, 0xa5, 0x68, 0x95, 0xad, 0xca, 0x76, 0xb3, 0xd3, 0x32, 0x84, 0x4a, 0x6e, 0xb3, 0x84, 0x0b,
	0xaf, 0xc0, 0x72, 0x86, 0x8a, 0x43, 0x1a, 0xc4, 0x04, 0x1b, 0xd0, 0xbe, 0x4c, 0x9c, 0x78, 0x10,
	0x79, 0x0e, 0x51, 0x54, 0x3a, 0x2c, 0x1e, 0xf9, 0x1e, 0x09, 0x58, 0xaf, 0xcb, 0xd9, 0x1a, 0x56,
	0x76, 0xc7, 0x9b, 0xd0, 0x92, 0xf1, 0x61, 0x5a, 0x03, 0x5a, 0x82, 0xaa, 0x8c, 0xaa, 0x59, 0xd5,
	0x5e, 0x17, 0x8f, 0x61, 0x25, 0xc7, 0x27, 0x92, 0xa0, 0x17, 0x45, 0x90, 0x94, 0xb8, 0x2a, 0x25,
	0xe6, 0x5d, 0x56, 0x91, 0xfd, 0x19, 0xd4, 0xfa, 0xfd, 0x53, 0xad, 0xca, 0xe3, 0xff, 0x37, 0x5c,
	0x4a, 0x5d, 0x9f, 0x18, 0xaa, 0x3d, 0x46, 0x57, 0x76, 0xd2, 0x4a, 0xa3, 0xf0, 0x5b, 0x68, 0x5e,
	0x78, 0x81, 0xab, 0xaa, 0xf8, 0xdb, 0xa4, 0xf8, 0x04, 0x5a, 0x47, 0x3e, 0x8d, 0xc9, 0x83, 0x89,
	0xbe, 0x55, 0xa0, 0x7d, 0x46, 0xbe, 0x32, 0xf1, 0x0d, 0x1e, 0xc8, 0x86, 0xde, 0x40, 0xf3, 0xca,
	0xf6, 0x58, 0xdf, 0xbb, 0x25, 0x34, 0x61, 0xf7, 0xf7, 0x24, 0x1f, 0x8d, 0xaf, 0x60, 0x25, 0xa7,
	0x44, 0x7e, 0x96, 0xdf, 0x18, 0x19, 0xb4, 0x09, 0x70, 0x46, 0xf9, 0xf1, 0x03, 0x11, 0x49, 0x17,
	0xad, 0x9c, 0x05, 0x0f, 0x61, 0xf9, 0x60, 0x30, 0xfa, 0x37, 0x15, 0x6a, 0xb0, 0xc0, 0x89, 0x7a,
	0x5d, 0x9e, 0xa8, 0x61, 0xa9, 0x2b, 0xfe, 0x5e, 0x91, 0x52, 0x73, 0xf3, 0xd6, 0x48, 0xe7, 0x2d,
	0xd5, 0x77, 0x49, 0x93, 0x68, 0x40, 0xfa, 0x76, 0x3c, 0x92, 0xb0, 0x9c, 0x05, 0x3d, 0x85, 0xf6,
	0xe4, 0x76, 0x9e, 0xb0, 0x30, 0x61, 0x5a, 0x8d, 0x47, 0x95, 0xec, 0x08, 0xc1, 0xdc, 0xa9, 0x17,
	0x8c, 0xb4, 0x39, 0xee, 0xe7, 0x67, 0x84, 0xa1, 0x25, 0xe2, 0x7a, 0x41, 0x98, 0xb0, 0x58, 0xab,
	0x6f, 0xd5, 0xb6, 0x1b, 0x56, 0xc1, 0x96, 0xe2, 0xba, 0x36, 0xb3, 0xb5, 0x79, 0x81, 0x4b, 0xcf,
	0xf8, 0x09, 0xac, 0x9e, 0x10, 0xd1, 0xef, 0xc3, 0x71, 0xaf, 0xab, 0x7a, 0x33, 0x25, 0x1f, 0x5b,
	0xf0, 0x68, 0x12, 0x96, 0x4a, 0x39, 0x08, 0x86, 0x29, 0x5e, 0xc5, 0x17, 0xcb, 0xab, 0x94, 0xca,
	0x53, 0xa9, 0xab, 0xb9, 0xd4, 0xcf, 0xa1, 0xad, 0x38, 0xff, 0xe4, 0x53, 0x77, 0xde, 0xc1, 0x12,
	0x3f, 0xc8, 0x27, 0x82, 0x44, 0xe8, 0x25, 0x2c, 0xc8, 0x0b, 0x5a, 0x93, 0x88, 0xe2, 0xab, 0xa3,
	0xaf, 0x4f, 0x9b, 0x45, 0xbe, 0xce, 0x8f, 0x2a, 0x34, 0x39, 0x99, 0xd0, 0x8a, 0xf6, 0xa1, 0x91,
	0x3d, 0x0b, 0x68, 0xa3, 0x38, 0x0a, 0xd9, 0xc3, 0xa3, 0x6b, 0x65, 0x87, 0xd4, 0xdf, 0x81, 0xb9,
	0x74, 0xb7, 0x11, 0x52, 0xf9, 0x26, 0x8b, 0xae, 0xaf, 0x97, 0x76, 0xe0, 0x38, 0x7d, 0x29, 0xd1,
	0x1e, 0xd4, 0xf9, 0x1e, 0x23, 0x35, 0x7a, 0xf9, 0xad, 0x9e, 0x89, 0xda, 0x87, 0x46, 0xb6, 0x29,
	0x99, 0xd2, 0xe9, 0x2d, 0xce, 0x94, 0x96, 0x97, 0xea, 0x35, 0x2c, 0xaa, 0x85, 0x40, 0xaa, 0x3b,
	0x53, 0x1b, 0x32, 0x2b, 0x77, 0xe7, 0x67, 0x05, 0xfe, 0x93, 0x81, 0xae, 0x17, 0xb3, 0x68, 0x8c,
	0x76, 0xa1, 0x69, 0x91, 0x01, 0x8d, 0x86, 0x82, 0xb0, 0xf0, 0xdd, 0x66, 0x96, 0x70, 0x04, 0xad,
	0xfc, 0xec, 0x21, 0x5d, 0xa2, 0xee, 0x18, 0x48, 0x7d, 0x63, 0xca, 0x97, 0xd5, 0xf1, 0x1e, 0xd6,
	0xee, 0x9c, 0x4c, 0xf4, 0xb8, 0xc4, 0x56, 0x9e, 0xdb, 0x99, 0xb4, 0x87, 0xe6, 0xc7, 0x9d, 0xdc,
	0xff, 0xdd, 0x81, 0x7f, 0x63, 0x3b, 0x51, 0xef, 0xdc, 0x1c, 0x51, 0xdb, 0xbf, 0xb1, 0x77, 0x68,
	0x48, 0x22, 0x9b, 0xd1, 0xc8, 0x0c, 0x47, 0xae, 0xc9, 0x19, 0x9c, 0x79, 0x5e, 0xdc, 0xee, 0xaf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x88, 0xd3, 0xe6, 0xe6, 0x76, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EventPublisherClient is the client API for EventPublisher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventPublisherClient interface {
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
}

type eventPublisherClient struct {
	cc *grpc.ClientConn
}

func NewEventPublisherClient(cc *grpc.ClientConn) EventPublisherClient {
	return &eventPublisherClient{cc}
}

func (c *eventPublisherClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, "/event.EventPublisher/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventPublisherServer is the server API for EventPublisher service.
type EventPublisherServer interface {
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
}

func RegisterEventPublisherServer(s *grpc.Server, srv EventPublisherServer) {
	s.RegisterService(&_EventPublisher_serviceDesc, srv)
}

func _EventPublisher_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventPublisherServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventPublisher/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventPublisherServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventPublisher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "event.EventPublisher",
	HandlerType: (*EventPublisherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _EventPublisher_Publish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event.proto",
}

// EventSourceClient is the client API for EventSource service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventSourceClient interface {
	// Subscribe to events
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error)
	// Ping keeps a subscription alive
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Close a subscription
	Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Ask for the next event on a subscription
	NextEvent(ctx context.Context, in *NextEventRequest, opts ...grpc.CallOption) (*NextEventResponse, error)
	// Acknowledge the processing of an event
	AckEvent(ctx context.Context, in *AckEventRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type eventSourceClient struct {
	cc *grpc.ClientConn
}

func NewEventSourceClient(cc *grpc.ClientConn) EventSourceClient {
	return &eventSourceClient{cc}
}

func (c *eventSourceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error) {
	out := new(SubscribeResponse)
	err := c.cc.Invoke(ctx, "/event.EventSource/Subscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventSourceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/event.EventSource/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventSourceClient) Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/event.EventSource/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventSourceClient) NextEvent(ctx context.Context, in *NextEventRequest, opts ...grpc.CallOption) (*NextEventResponse, error) {
	out := new(NextEventResponse)
	err := c.cc.Invoke(ctx, "/event.EventSource/NextEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventSourceClient) AckEvent(ctx context.Context, in *AckEventRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/event.EventSource/AckEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventSourceServer is the server API for EventSource service.
type EventSourceServer interface {
	// Subscribe to events
	Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error)
	// Ping keeps a subscription alive
	Ping(context.Context, *PingRequest) (*empty.Empty, error)
	// Close a subscription
	Close(context.Context, *CloseRequest) (*empty.Empty, error)
	// Ask for the next event on a subscription
	NextEvent(context.Context, *NextEventRequest) (*NextEventResponse, error)
	// Acknowledge the processing of an event
	AckEvent(context.Context, *AckEventRequest) (*empty.Empty, error)
}

func RegisterEventSourceServer(s *grpc.Server, srv EventSourceServer) {
	s.RegisterService(&_EventSource_serviceDesc, srv)
}

func _EventSource_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventSourceServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventSource/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventSourceServer).Subscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventSource_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventSourceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventSource/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventSourceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventSource_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventSourceServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventSource/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventSourceServer).Close(ctx, req.(*CloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventSource_NextEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventSourceServer).NextEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventSource/NextEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventSourceServer).NextEvent(ctx, req.(*NextEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventSource_AckEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventSourceServer).AckEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventSource/AckEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventSourceServer).AckEvent(ctx, req.(*AckEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventSource_serviceDesc = grpc.ServiceDesc{
	ServiceName: "event.EventSource",
	HandlerType: (*EventSourceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Subscribe",
			Handler:    _EventSource_Subscribe_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _EventSource_Ping_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _EventSource_Close_Handler,
		},
		{
			MethodName: "NextEvent",
			Handler:    _EventSource_NextEvent_Handler,
		},
		{
			MethodName: "AckEvent",
			Handler:    _EventSource_AckEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event.proto",
}

// EventRegistryClient is the client API for EventRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventRegistryClient interface {
	// Record the given event in the registry
	RecordEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*empty.Empty, error)
	// GetEventByID returns the event with given ID.
	GetEventByID(ctx context.Context, in *GetEventByIDRequest, opts ...grpc.CallOption) (*GetEventResponse, error)
	// GetEventByID returns the event with given ID.
	GetEventByTaskAndData(ctx context.Context, in *GetEventByTaskAndDataRequest, opts ...grpc.CallOption) (*GetEventResponse, error)
}

type eventRegistryClient struct {
	cc *grpc.ClientConn
}

func NewEventRegistryClient(cc *grpc.ClientConn) EventRegistryClient {
	return &eventRegistryClient{cc}
}

func (c *eventRegistryClient) RecordEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/event.EventRegistry/RecordEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventRegistryClient) GetEventByID(ctx context.Context, in *GetEventByIDRequest, opts ...grpc.CallOption) (*GetEventResponse, error) {
	out := new(GetEventResponse)
	err := c.cc.Invoke(ctx, "/event.EventRegistry/GetEventByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventRegistryClient) GetEventByTaskAndData(ctx context.Context, in *GetEventByTaskAndDataRequest, opts ...grpc.CallOption) (*GetEventResponse, error) {
	out := new(GetEventResponse)
	err := c.cc.Invoke(ctx, "/event.EventRegistry/GetEventByTaskAndData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventRegistryServer is the server API for EventRegistry service.
type EventRegistryServer interface {
	// Record the given event in the registry
	RecordEvent(context.Context, *Event) (*empty.Empty, error)
	// GetEventByID returns the event with given ID.
	GetEventByID(context.Context, *GetEventByIDRequest) (*GetEventResponse, error)
	// GetEventByID returns the event with given ID.
	GetEventByTaskAndData(context.Context, *GetEventByTaskAndDataRequest) (*GetEventResponse, error)
}

func RegisterEventRegistryServer(s *grpc.Server, srv EventRegistryServer) {
	s.RegisterService(&_EventRegistry_serviceDesc, srv)
}

func _EventRegistry_RecordEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventRegistryServer).RecordEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventRegistry/RecordEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventRegistryServer).RecordEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventRegistry_GetEventByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventRegistryServer).GetEventByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventRegistry/GetEventByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventRegistryServer).GetEventByID(ctx, req.(*GetEventByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventRegistry_GetEventByTaskAndData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventByTaskAndDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventRegistryServer).GetEventByTaskAndData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventRegistry/GetEventByTaskAndData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventRegistryServer).GetEventByTaskAndData(ctx, req.(*GetEventByTaskAndDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "event.EventRegistry",
	HandlerType: (*EventRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecordEvent",
			Handler:    _EventRegistry_RecordEvent_Handler,
		},
		{
			MethodName: "GetEventByID",
			Handler:    _EventRegistry_GetEventByID_Handler,
		},
		{
			MethodName: "GetEventByTaskAndData",
			Handler:    _EventRegistry_GetEventByTaskAndData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event.proto",
}
