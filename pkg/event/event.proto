syntax = "proto3";

package event;

option go_package = "github.com/AljabrIO/koalja-operator/pkg/event";

import "github.com/golang/protobuf/ptypes/duration/duration.proto";
import "github.com/golang/protobuf/ptypes/empty/empty.proto";

// EventPublisher is the API used to publish events
service EventPublisher {
    rpc Publish(PublishRequest) returns (PublishResponse);
}

message PublishRequest {
    Event Event = 1;
}

message PublishResponse {
}

// EventSource is the API used to subscribe to events
service EventSource {
    // Subscribe to events
    rpc Subscribe(SubscribeRequest) returns (SubscribeResponse);
    // Ping keeps a subscription alive
    rpc Ping(PingRequest) returns (google.protobuf.Empty);
    // Close a subscription
    rpc Close(CloseRequest) returns (google.protobuf.Empty);
    // Ask for the next event on a subscription
    rpc NextEvent(NextEventRequest) returns (NextEventResponse);
    // Acknowledge the processing of an event
    rpc AckEvent(AckEventRequest) returns (google.protobuf.Empty);
}

message SubscribeRequest {
    string ClientID = 1;
}

message Subscription {
    int64 ID = 1;
}

message SubscribeResponse {
    Subscription Subscription = 1;
    google.protobuf.Duration TTL = 2;
}

message PingRequest {
    Subscription Subscription = 1;
}

message CloseRequest {
    Subscription Subscription = 1;
}

message NextEventRequest {
    Subscription Subscription = 1;
    google.protobuf.Duration WaitTimeout = 2;
}

message NextEventResponse {
    Event Event = 1;
    bool NoEventYet = 2;
}

message AckEventRequest {
    Subscription Subscription = 1;
    string EventID = 2;
}

message Event {
    // ID is a unique ID of this event
    string ID = 1;
    // SourceTask contains the URI of the task that created the event
    string SourceTask = 2;
    // SourceTaskOutput contains the name of the output of the task that created the event
    string SourceTaskOutput = 3;
    // Link contains the URI of the Link that published the event
    string Link = 4;
    // SourceInputs contains zero or more URI's of events that resulted in this event
    repeated EventSourceInput SourceInputs = 5;
    // Data contains a URI of the data (payload) of the message
    string Data = 6;
}

message EventSourceInput {
    // ID of the source event
    string ID = 1; 
    // Name of the task input on which this event came in
    string InputName = 2;
}

// EventTuple is a tuple of N named events.
message EventTuple {
    map<string, Event> Members = 1;
}

// EventRegistry is a persistent event store
service EventRegistry {
    // Record the given event in the registry
    rpc RecordEvent(Event) returns (google.protobuf.Empty);
    // GetEventByID returns the event with given ID.
    rpc GetEventByID(GetEventByIDRequest) returns (GetEventResponse);
    // GetEventByID returns the event with given ID.
    rpc GetEventByTaskAndData(GetEventByTaskAndDataRequest) returns (GetEventResponse);
}

message GetEventByIDRequest {
    string ID = 1;
}

message GetEventByTaskAndDataRequest {
    string SourceTask = 1;
    string Data = 2;
}

message GetEventResponse {
    Event Event = 1;
}
