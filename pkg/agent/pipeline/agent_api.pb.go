// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: agent_api.proto

package pipeline // import "github.com/AljabrIO/koalja-operator/pkg/agent/pipeline"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import v1alpha1 "github.com/AljabrIO/koalja-operator/pkg/apis/koalja/v1alpha1"
import event "github.com/AljabrIO/koalja-operator/pkg/event"
import _ "github.com/gogo/protobuf/gogoproto"
import types "github.com/gogo/protobuf/types"
import empty "github.com/golang/protobuf/ptypes/empty"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type RegisterLinkRequest struct {
	// Name of the link
	LinkName string `protobuf:"bytes,1,opt,name=LinkName,proto3" json:"LinkName,omitempty"`
	// URI of the link
	URI string `protobuf:"bytes,2,opt,name=URI,proto3" json:"URI,omitempty"`
}

func (m *RegisterLinkRequest) Reset()         { *m = RegisterLinkRequest{} }
func (m *RegisterLinkRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterLinkRequest) ProtoMessage()    {}
func (*RegisterLinkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_agent_api_aa02047138668635, []int{0}
}
func (m *RegisterLinkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterLinkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterLinkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RegisterLinkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterLinkRequest.Merge(dst, src)
}
func (m *RegisterLinkRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegisterLinkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterLinkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterLinkRequest proto.InternalMessageInfo

func (m *RegisterLinkRequest) GetLinkName() string {
	if m != nil {
		return m.LinkName
	}
	return ""
}

func (m *RegisterLinkRequest) GetURI() string {
	if m != nil {
		return m.URI
	}
	return ""
}

type RegisterTaskRequest struct {
	// Name of the task
	TaskName string `protobuf:"bytes,1,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
	// URI of the task
	URI string `protobuf:"bytes,2,opt,name=URI,proto3" json:"URI,omitempty"`
}

func (m *RegisterTaskRequest) Reset()         { *m = RegisterTaskRequest{} }
func (m *RegisterTaskRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterTaskRequest) ProtoMessage()    {}
func (*RegisterTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_agent_api_aa02047138668635, []int{1}
}
func (m *RegisterTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RegisterTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterTaskRequest.Merge(dst, src)
}
func (m *RegisterTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegisterTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterTaskRequest proto.InternalMessageInfo

func (m *RegisterTaskRequest) GetTaskName() string {
	if m != nil {
		return m.TaskName
	}
	return ""
}

func (m *RegisterTaskRequest) GetURI() string {
	if m != nil {
		return m.URI
	}
	return ""
}

type LinkStatistics struct {
	// Name of the link
	LinkName string `protobuf:"bytes,1,opt,name=link_name,json=linkName,proto3" json:"link_name,omitempty"`
	// URI of the link
	URI string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	// Number of events waiting in this link before being processed
	EventsWaiting int64 `protobuf:"varint,3,opt,name=events_waiting,json=eventsWaiting,proto3" json:"events_waiting,omitempty"`
	// Number of events that are in progress but have not been acknowledged
	EventsInProgress int64 `protobuf:"varint,4,opt,name=events_in_progress,json=eventsInProgress,proto3" json:"events_in_progress,omitempty"`
	// Number of events that have been processed and acknowledged
	EventsAcknowledged int64 `protobuf:"varint,5,opt,name=events_acknowledged,json=eventsAcknowledged,proto3" json:"events_acknowledged,omitempty"`
}

func (m *LinkStatistics) Reset()         { *m = LinkStatistics{} }
func (m *LinkStatistics) String() string { return proto.CompactTextString(m) }
func (*LinkStatistics) ProtoMessage()    {}
func (*LinkStatistics) Descriptor() ([]byte, []int) {
	return fileDescriptor_agent_api_aa02047138668635, []int{2}
}
func (m *LinkStatistics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LinkStatistics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LinkStatistics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LinkStatistics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LinkStatistics.Merge(dst, src)
}
func (m *LinkStatistics) XXX_Size() int {
	return m.Size()
}
func (m *LinkStatistics) XXX_DiscardUnknown() {
	xxx_messageInfo_LinkStatistics.DiscardUnknown(m)
}

var xxx_messageInfo_LinkStatistics proto.InternalMessageInfo

func (m *LinkStatistics) GetLinkName() string {
	if m != nil {
		return m.LinkName
	}
	return ""
}

func (m *LinkStatistics) GetURI() string {
	if m != nil {
		return m.URI
	}
	return ""
}

func (m *LinkStatistics) GetEventsWaiting() int64 {
	if m != nil {
		return m.EventsWaiting
	}
	return 0
}

func (m *LinkStatistics) GetEventsInProgress() int64 {
	if m != nil {
		return m.EventsInProgress
	}
	return 0
}

func (m *LinkStatistics) GetEventsAcknowledged() int64 {
	if m != nil {
		return m.EventsAcknowledged
	}
	return 0
}

type OutputEventsRequest struct {
	// EventIDs is a list of event IDs.
	// The response will include only events that are (indirectly) related
	// to any of these event IDs.
	EventIDs []string `protobuf:"bytes,1,rep,name=event_ids,json=eventIds" json:"event_ids,omitempty"`
	// TaskNames is a list of names of tasks.
	// The response will include only events that are created by one of these tasks.
	TaskNames []string `protobuf:"bytes,2,rep,name=task_names,json=taskNames" json:"task_names,omitempty"`
	// If set, only events created after this timestamp are returned.
	CreatedAfter *types.Timestamp `protobuf:"bytes,3,opt,name=created_after,json=createdAfter" json:"created_after,omitempty"`
	// If set, only events created before this timestamp are returned.
	CreatedBefore *types.Timestamp `protobuf:"bytes,4,opt,name=created_before,json=createdBefore" json:"created_before,omitempty"`
}

func (m *OutputEventsRequest) Reset()         { *m = OutputEventsRequest{} }
func (m *OutputEventsRequest) String() string { return proto.CompactTextString(m) }
func (*OutputEventsRequest) ProtoMessage()    {}
func (*OutputEventsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_agent_api_aa02047138668635, []int{3}
}
func (m *OutputEventsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutputEventsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutputEventsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *OutputEventsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutputEventsRequest.Merge(dst, src)
}
func (m *OutputEventsRequest) XXX_Size() int {
	return m.Size()
}
func (m *OutputEventsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OutputEventsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OutputEventsRequest proto.InternalMessageInfo

func (m *OutputEventsRequest) GetEventIDs() []string {
	if m != nil {
		return m.EventIDs
	}
	return nil
}

func (m *OutputEventsRequest) GetTaskNames() []string {
	if m != nil {
		return m.TaskNames
	}
	return nil
}

func (m *OutputEventsRequest) GetCreatedAfter() *types.Timestamp {
	if m != nil {
		return m.CreatedAfter
	}
	return nil
}

func (m *OutputEventsRequest) GetCreatedBefore() *types.Timestamp {
	if m != nil {
		return m.CreatedBefore
	}
	return nil
}

type OutputEvents struct {
	// The selected events
	Events []*event.Event `protobuf:"bytes,1,rep,name=Events" json:"Events,omitempty"`
}

func (m *OutputEvents) Reset()         { *m = OutputEvents{} }
func (m *OutputEvents) String() string { return proto.CompactTextString(m) }
func (*OutputEvents) ProtoMessage()    {}
func (*OutputEvents) Descriptor() ([]byte, []int) {
	return fileDescriptor_agent_api_aa02047138668635, []int{4}
}
func (m *OutputEvents) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutputEvents) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutputEvents.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *OutputEvents) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutputEvents.Merge(dst, src)
}
func (m *OutputEvents) XXX_Size() int {
	return m.Size()
}
func (m *OutputEvents) XXX_DiscardUnknown() {
	xxx_messageInfo_OutputEvents.DiscardUnknown(m)
}

var xxx_messageInfo_OutputEvents proto.InternalMessageInfo

func (m *OutputEvents) GetEvents() []*event.Event {
	if m != nil {
		return m.Events
	}
	return nil
}

type GetLinkStatisticsRequest struct {
	// LinkNames is a list of names of links to get statistics from.
	// Empty list results in statistics from all links.
	LinkNames []string `protobuf:"bytes,1,rep,name=link_names,json=linkNames" json:"link_names,omitempty"`
}

func (m *GetLinkStatisticsRequest) Reset()         { *m = GetLinkStatisticsRequest{} }
func (m *GetLinkStatisticsRequest) String() string { return proto.CompactTextString(m) }
func (*GetLinkStatisticsRequest) ProtoMessage()    {}
func (*GetLinkStatisticsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_agent_api_aa02047138668635, []int{5}
}
func (m *GetLinkStatisticsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLinkStatisticsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLinkStatisticsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetLinkStatisticsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLinkStatisticsRequest.Merge(dst, src)
}
func (m *GetLinkStatisticsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetLinkStatisticsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLinkStatisticsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetLinkStatisticsRequest proto.InternalMessageInfo

func (m *GetLinkStatisticsRequest) GetLinkNames() []string {
	if m != nil {
		return m.LinkNames
	}
	return nil
}

type GetLinkStatisticsResponse struct {
	// Statistics contains the returned statistics
	Statistics []*LinkStatistics `protobuf:"bytes,1,rep,name=statistics" json:"statistics"`
}

func (m *GetLinkStatisticsResponse) Reset()         { *m = GetLinkStatisticsResponse{} }
func (m *GetLinkStatisticsResponse) String() string { return proto.CompactTextString(m) }
func (*GetLinkStatisticsResponse) ProtoMessage()    {}
func (*GetLinkStatisticsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_agent_api_aa02047138668635, []int{6}
}
func (m *GetLinkStatisticsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLinkStatisticsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLinkStatisticsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetLinkStatisticsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLinkStatisticsResponse.Merge(dst, src)
}
func (m *GetLinkStatisticsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetLinkStatisticsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLinkStatisticsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetLinkStatisticsResponse proto.InternalMessageInfo

func (m *GetLinkStatisticsResponse) GetStatistics() []*LinkStatistics {
	if m != nil {
		return m.Statistics
	}
	return nil
}

func init() {
	proto.RegisterType((*RegisterLinkRequest)(nil), "pipeline.RegisterLinkRequest")
	proto.RegisterType((*RegisterTaskRequest)(nil), "pipeline.RegisterTaskRequest")
	proto.RegisterType((*LinkStatistics)(nil), "pipeline.LinkStatistics")
	proto.RegisterType((*OutputEventsRequest)(nil), "pipeline.OutputEventsRequest")
	proto.RegisterType((*OutputEvents)(nil), "pipeline.OutputEvents")
	proto.RegisterType((*GetLinkStatisticsRequest)(nil), "pipeline.GetLinkStatisticsRequest")
	proto.RegisterType((*GetLinkStatisticsResponse)(nil), "pipeline.GetLinkStatisticsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AgentRegistryClient is the client API for AgentRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AgentRegistryClient interface {
	// Register an instance of a link agent
	RegisterLink(ctx context.Context, in *RegisterLinkRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Register an instance of a task agent
	RegisterTask(ctx context.Context, in *RegisterTaskRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Provide statistics of a link (called by the link)
	PublishLinkStatistics(ctx context.Context, in *LinkStatistics, opts ...grpc.CallOption) (*empty.Empty, error)
}

type agentRegistryClient struct {
	cc *grpc.ClientConn
}

func NewAgentRegistryClient(cc *grpc.ClientConn) AgentRegistryClient {
	return &agentRegistryClient{cc}
}

func (c *agentRegistryClient) RegisterLink(ctx context.Context, in *RegisterLinkRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pipeline.AgentRegistry/RegisterLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentRegistryClient) RegisterTask(ctx context.Context, in *RegisterTaskRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pipeline.AgentRegistry/RegisterTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentRegistryClient) PublishLinkStatistics(ctx context.Context, in *LinkStatistics, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pipeline.AgentRegistry/PublishLinkStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentRegistryServer is the server API for AgentRegistry service.
type AgentRegistryServer interface {
	// Register an instance of a link agent
	RegisterLink(context.Context, *RegisterLinkRequest) (*empty.Empty, error)
	// Register an instance of a task agent
	RegisterTask(context.Context, *RegisterTaskRequest) (*empty.Empty, error)
	// Provide statistics of a link (called by the link)
	PublishLinkStatistics(context.Context, *LinkStatistics) (*empty.Empty, error)
}

func RegisterAgentRegistryServer(s *grpc.Server, srv AgentRegistryServer) {
	s.RegisterService(&_AgentRegistry_serviceDesc, srv)
}

func _AgentRegistry_RegisterLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentRegistryServer).RegisterLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pipeline.AgentRegistry/RegisterLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentRegistryServer).RegisterLink(ctx, req.(*RegisterLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentRegistry_RegisterTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentRegistryServer).RegisterTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pipeline.AgentRegistry/RegisterTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentRegistryServer).RegisterTask(ctx, req.(*RegisterTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentRegistry_PublishLinkStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkStatistics)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentRegistryServer).PublishLinkStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pipeline.AgentRegistry/PublishLinkStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentRegistryServer).PublishLinkStatistics(ctx, req.(*LinkStatistics))
	}
	return interceptor(ctx, in, info, handler)
}

var _AgentRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pipeline.AgentRegistry",
	HandlerType: (*AgentRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterLink",
			Handler:    _AgentRegistry_RegisterLink_Handler,
		},
		{
			MethodName: "RegisterTask",
			Handler:    _AgentRegistry_RegisterTask_Handler,
		},
		{
			MethodName: "PublishLinkStatistics",
			Handler:    _AgentRegistry_PublishLinkStatistics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agent_api.proto",
}

// FrontendClient is the client API for Frontend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FrontendClient interface {
	// GetPipeline returns the pipeline resource.
	GetPipeline(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*v1alpha1.PipelineSpec, error)
	// GetOutputEvents returns all events (resulting from task outputs that
	// are not connected to inputs of other tasks) that match the given filter.
	GetOutputEvents(ctx context.Context, in *OutputEventsRequest, opts ...grpc.CallOption) (*OutputEvents, error)
	// GetLinkStatistics returns statistics for selected (or all) links.
	GetLinkStatistics(ctx context.Context, in *GetLinkStatisticsRequest, opts ...grpc.CallOption) (*GetLinkStatisticsResponse, error)
}

type frontendClient struct {
	cc *grpc.ClientConn
}

func NewFrontendClient(cc *grpc.ClientConn) FrontendClient {
	return &frontendClient{cc}
}

func (c *frontendClient) GetPipeline(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*v1alpha1.PipelineSpec, error) {
	out := new(v1alpha1.PipelineSpec)
	err := c.cc.Invoke(ctx, "/pipeline.Frontend/GetPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) GetOutputEvents(ctx context.Context, in *OutputEventsRequest, opts ...grpc.CallOption) (*OutputEvents, error) {
	out := new(OutputEvents)
	err := c.cc.Invoke(ctx, "/pipeline.Frontend/GetOutputEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) GetLinkStatistics(ctx context.Context, in *GetLinkStatisticsRequest, opts ...grpc.CallOption) (*GetLinkStatisticsResponse, error) {
	out := new(GetLinkStatisticsResponse)
	err := c.cc.Invoke(ctx, "/pipeline.Frontend/GetLinkStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FrontendServer is the server API for Frontend service.
type FrontendServer interface {
	// GetPipeline returns the pipeline resource.
	GetPipeline(context.Context, *empty.Empty) (*v1alpha1.PipelineSpec, error)
	// GetOutputEvents returns all events (resulting from task outputs that
	// are not connected to inputs of other tasks) that match the given filter.
	GetOutputEvents(context.Context, *OutputEventsRequest) (*OutputEvents, error)
	// GetLinkStatistics returns statistics for selected (or all) links.
	GetLinkStatistics(context.Context, *GetLinkStatisticsRequest) (*GetLinkStatisticsResponse, error)
}

func RegisterFrontendServer(s *grpc.Server, srv FrontendServer) {
	s.RegisterService(&_Frontend_serviceDesc, srv)
}

func _Frontend_GetPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).GetPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pipeline.Frontend/GetPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).GetPipeline(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_GetOutputEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OutputEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).GetOutputEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pipeline.Frontend/GetOutputEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).GetOutputEvents(ctx, req.(*OutputEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_GetLinkStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLinkStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).GetLinkStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pipeline.Frontend/GetLinkStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).GetLinkStatistics(ctx, req.(*GetLinkStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Frontend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pipeline.Frontend",
	HandlerType: (*FrontendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPipeline",
			Handler:    _Frontend_GetPipeline_Handler,
		},
		{
			MethodName: "GetOutputEvents",
			Handler:    _Frontend_GetOutputEvents_Handler,
		},
		{
			MethodName: "GetLinkStatistics",
			Handler:    _Frontend_GetLinkStatistics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agent_api.proto",
}

func (m *RegisterLinkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterLinkRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LinkName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAgentApi(dAtA, i, uint64(len(m.LinkName)))
		i += copy(dAtA[i:], m.LinkName)
	}
	if len(m.URI) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAgentApi(dAtA, i, uint64(len(m.URI)))
		i += copy(dAtA[i:], m.URI)
	}
	return i, nil
}

func (m *RegisterTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TaskName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAgentApi(dAtA, i, uint64(len(m.TaskName)))
		i += copy(dAtA[i:], m.TaskName)
	}
	if len(m.URI) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAgentApi(dAtA, i, uint64(len(m.URI)))
		i += copy(dAtA[i:], m.URI)
	}
	return i, nil
}

func (m *LinkStatistics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LinkStatistics) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LinkName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAgentApi(dAtA, i, uint64(len(m.LinkName)))
		i += copy(dAtA[i:], m.LinkName)
	}
	if len(m.URI) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAgentApi(dAtA, i, uint64(len(m.URI)))
		i += copy(dAtA[i:], m.URI)
	}
	if m.EventsWaiting != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAgentApi(dAtA, i, uint64(m.EventsWaiting))
	}
	if m.EventsInProgress != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAgentApi(dAtA, i, uint64(m.EventsInProgress))
	}
	if m.EventsAcknowledged != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintAgentApi(dAtA, i, uint64(m.EventsAcknowledged))
	}
	return i, nil
}

func (m *OutputEventsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutputEventsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EventIDs) > 0 {
		for _, s := range m.EventIDs {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.TaskNames) > 0 {
		for _, s := range m.TaskNames {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.CreatedAfter != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAgentApi(dAtA, i, uint64(m.CreatedAfter.Size()))
		n1, err := m.CreatedAfter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.CreatedBefore != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAgentApi(dAtA, i, uint64(m.CreatedBefore.Size()))
		n2, err := m.CreatedBefore.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *OutputEvents) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutputEvents) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAgentApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetLinkStatisticsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLinkStatisticsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LinkNames) > 0 {
		for _, s := range m.LinkNames {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *GetLinkStatisticsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLinkStatisticsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Statistics) > 0 {
		for _, msg := range m.Statistics {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAgentApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintAgentApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RegisterLinkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LinkName)
	if l > 0 {
		n += 1 + l + sovAgentApi(uint64(l))
	}
	l = len(m.URI)
	if l > 0 {
		n += 1 + l + sovAgentApi(uint64(l))
	}
	return n
}

func (m *RegisterTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskName)
	if l > 0 {
		n += 1 + l + sovAgentApi(uint64(l))
	}
	l = len(m.URI)
	if l > 0 {
		n += 1 + l + sovAgentApi(uint64(l))
	}
	return n
}

func (m *LinkStatistics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LinkName)
	if l > 0 {
		n += 1 + l + sovAgentApi(uint64(l))
	}
	l = len(m.URI)
	if l > 0 {
		n += 1 + l + sovAgentApi(uint64(l))
	}
	if m.EventsWaiting != 0 {
		n += 1 + sovAgentApi(uint64(m.EventsWaiting))
	}
	if m.EventsInProgress != 0 {
		n += 1 + sovAgentApi(uint64(m.EventsInProgress))
	}
	if m.EventsAcknowledged != 0 {
		n += 1 + sovAgentApi(uint64(m.EventsAcknowledged))
	}
	return n
}

func (m *OutputEventsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EventIDs) > 0 {
		for _, s := range m.EventIDs {
			l = len(s)
			n += 1 + l + sovAgentApi(uint64(l))
		}
	}
	if len(m.TaskNames) > 0 {
		for _, s := range m.TaskNames {
			l = len(s)
			n += 1 + l + sovAgentApi(uint64(l))
		}
	}
	if m.CreatedAfter != nil {
		l = m.CreatedAfter.Size()
		n += 1 + l + sovAgentApi(uint64(l))
	}
	if m.CreatedBefore != nil {
		l = m.CreatedBefore.Size()
		n += 1 + l + sovAgentApi(uint64(l))
	}
	return n
}

func (m *OutputEvents) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovAgentApi(uint64(l))
		}
	}
	return n
}

func (m *GetLinkStatisticsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LinkNames) > 0 {
		for _, s := range m.LinkNames {
			l = len(s)
			n += 1 + l + sovAgentApi(uint64(l))
		}
	}
	return n
}

func (m *GetLinkStatisticsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Statistics) > 0 {
		for _, e := range m.Statistics {
			l = e.Size()
			n += 1 + l + sovAgentApi(uint64(l))
		}
	}
	return n
}

func sovAgentApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAgentApi(x uint64) (n int) {
	return sovAgentApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RegisterLinkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterLinkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterLinkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LinkName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgentApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgentApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LinkStatistics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LinkStatistics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LinkStatistics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LinkName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventsWaiting", wireType)
			}
			m.EventsWaiting = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventsWaiting |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventsInProgress", wireType)
			}
			m.EventsInProgress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventsInProgress |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventsAcknowledged", wireType)
			}
			m.EventsAcknowledged = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventsAcknowledged |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgentApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgentApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutputEventsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutputEventsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutputEventsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventIDs = append(m.EventIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskNames = append(m.TaskNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAfter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAfter == nil {
				m.CreatedAfter = &types.Timestamp{}
			}
			if err := m.CreatedAfter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedBefore", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedBefore == nil {
				m.CreatedBefore = &types.Timestamp{}
			}
			if err := m.CreatedBefore.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgentApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutputEvents) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutputEvents: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutputEvents: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &event.Event{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgentApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLinkStatisticsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLinkStatisticsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLinkStatisticsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LinkNames = append(m.LinkNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgentApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLinkStatisticsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLinkStatisticsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLinkStatisticsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statistics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statistics = append(m.Statistics, &LinkStatistics{})
			if err := m.Statistics[len(m.Statistics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgentApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAgentApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAgentApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAgentApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAgentApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAgentApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAgentApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAgentApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAgentApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAgentApi   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("agent_api.proto", fileDescriptor_agent_api_aa02047138668635) }

var fileDescriptor_agent_api_aa02047138668635 = []byte{
	// 911 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0xda, 0x50, 0xec, 0x89, 0x9d, 0x26, 0x93, 0x10, 0x6d, 0xac, 0xe0, 0x8d, 0x16, 0x90,
	0x5a, 0xd4, 0xee, 0x2a, 0x29, 0x42, 0xfc, 0x38, 0xc5, 0x6d, 0x88, 0x8c, 0x2a, 0x1a, 0xb6, 0x01,
	0x24, 0x2e, 0x66, 0x6c, 0x4f, 0x36, 0x53, 0xaf, 0x67, 0x86, 0x9d, 0x71, 0xaa, 0x1c, 0xb8, 0x70,
	0xe1, 0x8a, 0xc4, 0x81, 0x13, 0xff, 0x0f, 0xc7, 0x4a, 0x5c, 0x38, 0xad, 0xd0, 0x86, 0x03, 0xea,
	0xbf, 0xc0, 0x05, 0xcd, 0xcc, 0x8e, 0xbd, 0x6e, 0xed, 0x36, 0x97, 0xd5, 0xbc, 0x79, 0xef, 0xfb,
	0xde, 0xdb, 0x37, 0xdf, 0x9b, 0x01, 0x37, 0x51, 0x8c, 0xa9, 0xec, 0x21, 0x4e, 0x02, 0x9e, 0x32,
	0xc9, 0x60, 0x8d, 0x13, 0x8e, 0x13, 0x42, 0x71, 0xeb, 0x61, 0x4c, 0xe4, 0xf9, 0xa4, 0x1f, 0x0c,
	0xd8, 0x38, 0x3c, 0x4c, 0x9e, 0xa0, 0x7e, 0xda, 0x7d, 0x14, 0x8e, 0x18, 0x4a, 0x9e, 0xa0, 0xbb,
	0x8c, 0xe3, 0x14, 0x49, 0x96, 0x86, 0x7c, 0x14, 0x87, 0x88, 0x13, 0x51, 0x38, 0xc2, 0x8b, 0x7d,
	0x94, 0xf0, 0x73, 0xb4, 0x1f, 0xc6, 0x98, 0xaa, 0x10, 0x3c, 0x34, 0xbc, 0xad, 0xcf, 0x4a, 0x6c,
	0x31, 0x4b, 0x10, 0x8d, 0x43, 0xed, 0xe8, 0x4f, 0xce, 0x42, 0x2e, 0x2f, 0x39, 0x16, 0xa1, 0x24,
	0x63, 0x2c, 0x24, 0x1a, 0xf3, 0xd9, 0xaa, 0x00, 0xdf, 0x7b, 0x3d, 0x18, 0x8f, 0xb9, 0xbc, 0x34,
	0xdf, 0x02, 0xf4, 0xc9, 0x75, 0xeb, 0xc7, 0x17, 0x98, 0x4a, 0xf3, 0x2d, 0xa0, 0xbb, 0x31, 0x63,
	0x71, 0x82, 0xd5, 0x9f, 0x85, 0x88, 0x52, 0x26, 0x91, 0x24, 0x8c, 0x8a, 0xc2, 0x7b, 0x77, 0xae,
	0x9a, 0x98, 0xcd, 0x6a, 0x51, 0x96, 0x36, 0xf4, 0xca, 0x84, 0xfb, 0xf7, 0xc1, 0x66, 0x84, 0x63,
	0x22, 0x24, 0x4e, 0x1f, 0x12, 0x3a, 0x8a, 0xf0, 0x0f, 0x13, 0x2c, 0x24, 0x6c, 0x81, 0x9a, 0x32,
	0xbf, 0x44, 0x63, 0xec, 0x3a, 0x7b, 0xce, 0xad, 0x7a, 0x34, 0xb5, 0xe1, 0x3a, 0xa8, 0x7e, 0x1d,
	0x75, 0xdd, 0x8a, 0xde, 0x56, 0xcb, 0x32, 0xc9, 0x29, 0x12, 0x65, 0x12, 0x65, 0x96, 0x49, 0xac,
	0xbd, 0x80, 0xe4, 0xf7, 0x0a, 0x58, 0x53, 0x39, 0x1e, 0xab, 0xff, 0x11, 0x92, 0x0c, 0x04, 0xbc,
	0x0d, 0xea, 0x09, 0xa1, 0xa3, 0x1e, 0x9d, 0x32, 0x74, 0x1a, 0x79, 0xe6, 0x4d, 0x4b, 0x89, 0x6a,
	0x89, 0x2d, 0x6a, 0x07, 0x54, 0x27, 0x29, 0x31, 0x7c, 0x9d, 0xb7, 0xf2, 0xcc, 0x53, 0x9c, 0x91,
	0xda, 0x83, 0x1f, 0x83, 0x35, 0xdd, 0x3e, 0xd1, 0x7b, 0x8a, 0x88, 0x24, 0x34, 0x76, 0xab, 0x7b,
	0xce, 0xad, 0x6a, 0x67, 0x23, 0xcf, 0xbc, 0xe6, 0x91, 0xf6, 0x7c, 0x6b, 0x1c, 0x51, 0x13, 0x97,
	0x4d, 0xd8, 0x01, 0xb0, 0x40, 0x12, 0xda, 0xe3, 0x29, 0x8b, 0x53, 0x2c, 0x84, 0xfb, 0x86, 0x46,
	0x6f, 0xe5, 0x99, 0xb7, 0x6e, 0xd0, 0x5d, 0x7a, 0x52, 0xf8, 0xa2, 0x75, 0xfc, 0xc2, 0x0e, 0x3c,
	0x06, 0x9b, 0x05, 0x07, 0x1a, 0x8c, 0x28, 0x7b, 0x9a, 0xe0, 0x61, 0x8c, 0x87, 0xee, 0x9b, 0x9a,
	0x64, 0x3b, 0xcf, 0x3c, 0x68, 0x48, 0x0e, 0x4b, 0xde, 0xa8, 0x48, 0x5b, 0xde, 0xf3, 0x7f, 0xab,
	0x80, 0xcd, 0x47, 0x13, 0xc9, 0x27, 0xd2, 0x00, 0x6c, 0x97, 0x6f, 0x83, 0xba, 0x8e, 0xee, 0x91,
	0xa1, 0x70, 0x9d, 0xbd, 0xaa, 0x6d, 0x92, 0x8e, 0xea, 0x3e, 0x10, 0x51, 0x4d, 0xbb, 0xbb, 0x43,
	0x01, 0xef, 0x00, 0x20, 0x91, 0x30, 0xfd, 0x14, 0x6e, 0x45, 0xc7, 0x36, 0xf3, 0xcc, 0xab, 0xdb,
	0x63, 0x11, 0x51, 0x5d, 0xda, 0x25, 0xfc, 0x0a, 0x34, 0x07, 0x29, 0x56, 0x53, 0xd2, 0x43, 0x67,
	0x12, 0xa7, 0xba, 0x6d, 0xab, 0x07, 0xad, 0xc0, 0xe8, 0x2f, 0xb0, 0xc2, 0x0a, 0x4e, 0xed, 0x40,
	0x74, 0xd6, 0xf3, 0xcc, 0x6b, 0xdc, 0x37, 0xa0, 0x43, 0x85, 0x89, 0x1a, 0x83, 0x92, 0x05, 0x4f,
	0xc1, 0x9a, 0xa5, 0xec, 0xe3, 0x33, 0x96, 0x62, 0xdd, 0xcc, 0x57, 0x73, 0xea, 0x63, 0x2a, 0x38,
	0x3b, 0x1a, 0x14, 0xd9, 0xba, 0x8c, 0xe9, 0x7f, 0x08, 0x1a, 0xe5, 0xc6, 0xc0, 0xf7, 0xc0, 0x0d,
	0xb3, 0xd2, 0xed, 0x58, 0x3d, 0x68, 0x04, 0x66, 0x7c, 0xf4, 0x66, 0x54, 0xf8, 0xfc, 0xef, 0x81,
	0x7b, 0x8c, 0xe5, 0xbc, 0xe2, 0x6c, 0x4f, 0x1f, 0x00, 0x30, 0x15, 0x9e, 0x6d, 0xea, 0xfb, 0xaa,
	0x51, 0x56, 0x79, 0xe2, 0x79, 0xe6, 0x6d, 0xcd, 0x42, 0xee, 0xb0, 0x31, 0x91, 0x7a, 0xbc, 0xa3,
	0xba, 0x95, 0xa4, 0xf0, 0x05, 0xd8, 0x59, 0x90, 0x41, 0x70, 0x46, 0x05, 0x86, 0xdf, 0x00, 0x20,
	0xa6, 0xbb, 0x45, 0xa1, 0x6e, 0x60, 0xef, 0xb7, 0x60, 0x1e, 0xd5, 0xd9, 0xcd, 0x33, 0x0f, 0xcc,
	0xec, 0xe7, 0x99, 0x57, 0x42, 0x47, 0xa5, 0xf5, 0xc1, 0xbf, 0x0e, 0x68, 0x1e, 0xaa, 0x6b, 0xd3,
	0x4c, 0x64, 0x7a, 0x09, 0x8f, 0x40, 0xa3, 0x3c, 0xe2, 0xf0, 0x9d, 0x59, 0x96, 0x05, 0xa3, 0xdf,
	0xda, 0x7e, 0xe9, 0x2c, 0x8e, 0xd4, 0x8f, 0x95, 0x69, 0x94, 0x5c, 0x16, 0xd1, 0x94, 0x86, 0x7f,
	0x29, 0x4d, 0x17, 0xbc, 0x7d, 0x32, 0xe9, 0x27, 0x44, 0x9c, 0xbf, 0x30, 0xec, 0x4b, 0x7f, 0x7e,
	0x19, 0xd5, 0xc1, 0x7f, 0x15, 0x50, 0xfb, 0x3c, 0x65, 0x54, 0x62, 0x3a, 0x84, 0x3f, 0x3b, 0x60,
	0xf5, 0x18, 0xcb, 0x93, 0x82, 0x03, 0x2e, 0x01, 0xb5, 0xbe, 0x08, 0x66, 0x17, 0x64, 0x60, 0x6f,
	0xde, 0xc0, 0xdc, 0xbc, 0x3d, 0x7b, 0xf3, 0x06, 0x7c, 0x14, 0x07, 0xea, 0xe5, 0x28, 0x1c, 0x81,
	0x7d, 0x39, 0x02, 0xcb, 0xff, 0x98, 0xe3, 0x81, 0xbf, 0xf5, 0xd3, 0x9f, 0xff, 0xfc, 0x5a, 0x59,
	0x83, 0x8d, 0xf0, 0x62, 0x3f, 0xb4, 0xd5, 0xc3, 0x33, 0x70, 0xf3, 0x18, 0xcb, 0x39, 0x45, 0x96,
	0x7a, 0xb5, 0x60, 0x84, 0x5b, 0xdb, 0x8b, 0xdd, 0xfe, 0xae, 0xe6, 0xdf, 0xf6, 0x37, 0x14, 0x3f,
	0xd3, 0x1e, 0xf3, 0x12, 0x88, 0x4f, 0x9d, 0x0f, 0xe0, 0x8f, 0x60, 0xe3, 0x25, 0x79, 0x41, 0x7f,
	0x46, 0xb5, 0x4c, 0xdd, 0xad, 0x77, 0x5f, 0x19, 0x63, 0xf4, 0xe9, 0x7b, 0x3a, 0xf7, 0x8e, 0xbf,
	0xa5, 0x72, 0xcf, 0xf4, 0x15, 0x2a, 0x79, 0xab, 0xf4, 0x9d, 0x93, 0x3f, 0xf2, 0xb6, 0xf3, 0x2c,
	0x6f, 0x3b, 0x7f, 0xe7, 0x6d, 0xe7, 0x97, 0xab, 0xf6, 0xca, 0xb3, 0xab, 0xf6, 0xca, 0x5f, 0x57,
	0xed, 0x95, 0xef, 0x3e, 0xba, 0xf6, 0xdb, 0xac, 0x74, 0x3a, 0x6d, 0x5c, 0xff, 0x86, 0x3e, 0xaa,
	0x7b, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0xcd, 0x3b, 0x6e, 0xaf, 0xf7, 0x07, 0x00, 0x00,
}
