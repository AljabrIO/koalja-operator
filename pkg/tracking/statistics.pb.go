// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: statistics.proto

package tracking // import "github.com/AljabrIO/koalja-operator/pkg/tracking"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import empty "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type LinkStatistics struct {
	// Name of the link
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// URI of the link
	URI string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	// Number of events waiting in this link before being processed
	EventsWaiting int64 `protobuf:"varint,3,opt,name=events_waiting,json=eventsWaiting,proto3" json:"events_waiting,omitempty"`
	// Number of events that are in progress but have not been acknowledged
	EventsInProgress int64 `protobuf:"varint,4,opt,name=events_in_progress,json=eventsInProgress,proto3" json:"events_in_progress,omitempty"`
	// Number of events that have been processed and acknowledged
	EventsAcknowledged int64 `protobuf:"varint,5,opt,name=events_acknowledged,json=eventsAcknowledged,proto3" json:"events_acknowledged,omitempty"`
}

func (m *LinkStatistics) Reset()         { *m = LinkStatistics{} }
func (m *LinkStatistics) String() string { return proto.CompactTextString(m) }
func (*LinkStatistics) ProtoMessage()    {}
func (*LinkStatistics) Descriptor() ([]byte, []int) {
	return fileDescriptor_statistics_9e952b5e5dddf5a2, []int{0}
}
func (m *LinkStatistics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LinkStatistics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LinkStatistics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LinkStatistics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LinkStatistics.Merge(dst, src)
}
func (m *LinkStatistics) XXX_Size() int {
	return m.Size()
}
func (m *LinkStatistics) XXX_DiscardUnknown() {
	xxx_messageInfo_LinkStatistics.DiscardUnknown(m)
}

var xxx_messageInfo_LinkStatistics proto.InternalMessageInfo

func (m *LinkStatistics) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LinkStatistics) GetURI() string {
	if m != nil {
		return m.URI
	}
	return ""
}

func (m *LinkStatistics) GetEventsWaiting() int64 {
	if m != nil {
		return m.EventsWaiting
	}
	return 0
}

func (m *LinkStatistics) GetEventsInProgress() int64 {
	if m != nil {
		return m.EventsInProgress
	}
	return 0
}

func (m *LinkStatistics) GetEventsAcknowledged() int64 {
	if m != nil {
		return m.EventsAcknowledged
	}
	return 0
}

type TaskStatistics struct {
	// Name of the task
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// URI of the task
	URI string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	// Statistics for every input
	Inputs []*TaskInputStatistics `protobuf:"bytes,3,rep,name=inputs" json:"inputs,omitempty"`
	// Statistics for every output
	Outputs []*TaskOutputStatistics `protobuf:"bytes,4,rep,name=outputs" json:"outputs,omitempty"`
	// Number of snapshots waiting in this task waiting to be executed
	SnapshotsWaiting int64 `protobuf:"varint,5,opt,name=snapshots_waiting,json=snapshotsWaiting,proto3" json:"snapshots_waiting,omitempty"`
	// Number of snapshots that are in execution but have not been finished
	SnapshotsInProgress int64 `protobuf:"varint,6,opt,name=snapshots_in_progress,json=snapshotsInProgress,proto3" json:"snapshots_in_progress,omitempty"`
	// Number of snapshots that have been executed succesfully
	SnapshotsSucceeded int64 `protobuf:"varint,7,opt,name=snapshots_succeeded,json=snapshotsSucceeded,proto3" json:"snapshots_succeeded,omitempty"`
	// Number of snapshots that have been executed resulting in an error
	SnapshotsFailed int64 `protobuf:"varint,8,opt,name=snapshots_failed,json=snapshotsFailed,proto3" json:"snapshots_failed,omitempty"`
}

func (m *TaskStatistics) Reset()         { *m = TaskStatistics{} }
func (m *TaskStatistics) String() string { return proto.CompactTextString(m) }
func (*TaskStatistics) ProtoMessage()    {}
func (*TaskStatistics) Descriptor() ([]byte, []int) {
	return fileDescriptor_statistics_9e952b5e5dddf5a2, []int{1}
}
func (m *TaskStatistics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskStatistics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskStatistics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TaskStatistics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskStatistics.Merge(dst, src)
}
func (m *TaskStatistics) XXX_Size() int {
	return m.Size()
}
func (m *TaskStatistics) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskStatistics.DiscardUnknown(m)
}

var xxx_messageInfo_TaskStatistics proto.InternalMessageInfo

func (m *TaskStatistics) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TaskStatistics) GetURI() string {
	if m != nil {
		return m.URI
	}
	return ""
}

func (m *TaskStatistics) GetInputs() []*TaskInputStatistics {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *TaskStatistics) GetOutputs() []*TaskOutputStatistics {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *TaskStatistics) GetSnapshotsWaiting() int64 {
	if m != nil {
		return m.SnapshotsWaiting
	}
	return 0
}

func (m *TaskStatistics) GetSnapshotsInProgress() int64 {
	if m != nil {
		return m.SnapshotsInProgress
	}
	return 0
}

func (m *TaskStatistics) GetSnapshotsSucceeded() int64 {
	if m != nil {
		return m.SnapshotsSucceeded
	}
	return 0
}

func (m *TaskStatistics) GetSnapshotsFailed() int64 {
	if m != nil {
		return m.SnapshotsFailed
	}
	return 0
}

type TaskInputStatistics struct {
	// Name of the task input
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Number of events that have been received from the link
	EventsReceived int64 `protobuf:"varint,2,opt,name=events_received,json=eventsReceived,proto3" json:"events_received,omitempty"`
	// Number of events that are in progress in an executor but have not been acknowledged
	EventsInProgress int64 `protobuf:"varint,3,opt,name=events_in_progress,json=eventsInProgress,proto3" json:"events_in_progress,omitempty"`
	// Number of events that have been processed and acknowledged
	EventsProcessed int64 `protobuf:"varint,4,opt,name=events_processed,json=eventsProcessed,proto3" json:"events_processed,omitempty"`
	// Number of events that have been skipped and acknowledged
	EventsSkipped int64 `protobuf:"varint,5,opt,name=events_skipped,json=eventsSkipped,proto3" json:"events_skipped,omitempty"`
}

func (m *TaskInputStatistics) Reset()         { *m = TaskInputStatistics{} }
func (m *TaskInputStatistics) String() string { return proto.CompactTextString(m) }
func (*TaskInputStatistics) ProtoMessage()    {}
func (*TaskInputStatistics) Descriptor() ([]byte, []int) {
	return fileDescriptor_statistics_9e952b5e5dddf5a2, []int{2}
}
func (m *TaskInputStatistics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskInputStatistics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskInputStatistics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TaskInputStatistics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskInputStatistics.Merge(dst, src)
}
func (m *TaskInputStatistics) XXX_Size() int {
	return m.Size()
}
func (m *TaskInputStatistics) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskInputStatistics.DiscardUnknown(m)
}

var xxx_messageInfo_TaskInputStatistics proto.InternalMessageInfo

func (m *TaskInputStatistics) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TaskInputStatistics) GetEventsReceived() int64 {
	if m != nil {
		return m.EventsReceived
	}
	return 0
}

func (m *TaskInputStatistics) GetEventsInProgress() int64 {
	if m != nil {
		return m.EventsInProgress
	}
	return 0
}

func (m *TaskInputStatistics) GetEventsProcessed() int64 {
	if m != nil {
		return m.EventsProcessed
	}
	return 0
}

func (m *TaskInputStatistics) GetEventsSkipped() int64 {
	if m != nil {
		return m.EventsSkipped
	}
	return 0
}

type TaskOutputStatistics struct {
	// Name of the task output
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Number of events that have been published to the link
	EventsPublished int64 `protobuf:"varint,2,opt,name=events_published,json=eventsPublished,proto3" json:"events_published,omitempty"`
}

func (m *TaskOutputStatistics) Reset()         { *m = TaskOutputStatistics{} }
func (m *TaskOutputStatistics) String() string { return proto.CompactTextString(m) }
func (*TaskOutputStatistics) ProtoMessage()    {}
func (*TaskOutputStatistics) Descriptor() ([]byte, []int) {
	return fileDescriptor_statistics_9e952b5e5dddf5a2, []int{3}
}
func (m *TaskOutputStatistics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskOutputStatistics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskOutputStatistics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TaskOutputStatistics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskOutputStatistics.Merge(dst, src)
}
func (m *TaskOutputStatistics) XXX_Size() int {
	return m.Size()
}
func (m *TaskOutputStatistics) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskOutputStatistics.DiscardUnknown(m)
}

var xxx_messageInfo_TaskOutputStatistics proto.InternalMessageInfo

func (m *TaskOutputStatistics) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TaskOutputStatistics) GetEventsPublished() int64 {
	if m != nil {
		return m.EventsPublished
	}
	return 0
}

func init() {
	proto.RegisterType((*LinkStatistics)(nil), "tracking.LinkStatistics")
	proto.RegisterType((*TaskStatistics)(nil), "tracking.TaskStatistics")
	proto.RegisterType((*TaskInputStatistics)(nil), "tracking.TaskInputStatistics")
	proto.RegisterType((*TaskOutputStatistics)(nil), "tracking.TaskOutputStatistics")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StatisticsSinkClient is the client API for StatisticsSink service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StatisticsSinkClient interface {
	// Provide statistics of a link (called by the link)
	PublishLinkStatistics(ctx context.Context, in *LinkStatistics, opts ...grpc.CallOption) (*empty.Empty, error)
	// Provide statistics of a task (called by the task)
	PublishTaskStatistics(ctx context.Context, in *TaskStatistics, opts ...grpc.CallOption) (*empty.Empty, error)
}

type statisticsSinkClient struct {
	cc *grpc.ClientConn
}

func NewStatisticsSinkClient(cc *grpc.ClientConn) StatisticsSinkClient {
	return &statisticsSinkClient{cc}
}

func (c *statisticsSinkClient) PublishLinkStatistics(ctx context.Context, in *LinkStatistics, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tracking.StatisticsSink/PublishLinkStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsSinkClient) PublishTaskStatistics(ctx context.Context, in *TaskStatistics, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tracking.StatisticsSink/PublishTaskStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatisticsSinkServer is the server API for StatisticsSink service.
type StatisticsSinkServer interface {
	// Provide statistics of a link (called by the link)
	PublishLinkStatistics(context.Context, *LinkStatistics) (*empty.Empty, error)
	// Provide statistics of a task (called by the task)
	PublishTaskStatistics(context.Context, *TaskStatistics) (*empty.Empty, error)
}

func RegisterStatisticsSinkServer(s *grpc.Server, srv StatisticsSinkServer) {
	s.RegisterService(&_StatisticsSink_serviceDesc, srv)
}

func _StatisticsSink_PublishLinkStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkStatistics)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsSinkServer).PublishLinkStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tracking.StatisticsSink/PublishLinkStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsSinkServer).PublishLinkStatistics(ctx, req.(*LinkStatistics))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticsSink_PublishTaskStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskStatistics)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsSinkServer).PublishTaskStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tracking.StatisticsSink/PublishTaskStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsSinkServer).PublishTaskStatistics(ctx, req.(*TaskStatistics))
	}
	return interceptor(ctx, in, info, handler)
}

var _StatisticsSink_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tracking.StatisticsSink",
	HandlerType: (*StatisticsSinkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishLinkStatistics",
			Handler:    _StatisticsSink_PublishLinkStatistics_Handler,
		},
		{
			MethodName: "PublishTaskStatistics",
			Handler:    _StatisticsSink_PublishTaskStatistics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "statistics.proto",
}

func (m *LinkStatistics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LinkStatistics) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStatistics(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.URI) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStatistics(dAtA, i, uint64(len(m.URI)))
		i += copy(dAtA[i:], m.URI)
	}
	if m.EventsWaiting != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStatistics(dAtA, i, uint64(m.EventsWaiting))
	}
	if m.EventsInProgress != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStatistics(dAtA, i, uint64(m.EventsInProgress))
	}
	if m.EventsAcknowledged != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStatistics(dAtA, i, uint64(m.EventsAcknowledged))
	}
	return i, nil
}

func (m *TaskStatistics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskStatistics) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStatistics(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.URI) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStatistics(dAtA, i, uint64(len(m.URI)))
		i += copy(dAtA[i:], m.URI)
	}
	if len(m.Inputs) > 0 {
		for _, msg := range m.Inputs {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintStatistics(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Outputs) > 0 {
		for _, msg := range m.Outputs {
			dAtA[i] = 0x22
			i++
			i = encodeVarintStatistics(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.SnapshotsWaiting != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStatistics(dAtA, i, uint64(m.SnapshotsWaiting))
	}
	if m.SnapshotsInProgress != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintStatistics(dAtA, i, uint64(m.SnapshotsInProgress))
	}
	if m.SnapshotsSucceeded != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintStatistics(dAtA, i, uint64(m.SnapshotsSucceeded))
	}
	if m.SnapshotsFailed != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintStatistics(dAtA, i, uint64(m.SnapshotsFailed))
	}
	return i, nil
}

func (m *TaskInputStatistics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskInputStatistics) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStatistics(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.EventsReceived != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStatistics(dAtA, i, uint64(m.EventsReceived))
	}
	if m.EventsInProgress != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStatistics(dAtA, i, uint64(m.EventsInProgress))
	}
	if m.EventsProcessed != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStatistics(dAtA, i, uint64(m.EventsProcessed))
	}
	if m.EventsSkipped != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStatistics(dAtA, i, uint64(m.EventsSkipped))
	}
	return i, nil
}

func (m *TaskOutputStatistics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskOutputStatistics) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStatistics(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.EventsPublished != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStatistics(dAtA, i, uint64(m.EventsPublished))
	}
	return i, nil
}

func encodeVarintStatistics(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LinkStatistics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStatistics(uint64(l))
	}
	l = len(m.URI)
	if l > 0 {
		n += 1 + l + sovStatistics(uint64(l))
	}
	if m.EventsWaiting != 0 {
		n += 1 + sovStatistics(uint64(m.EventsWaiting))
	}
	if m.EventsInProgress != 0 {
		n += 1 + sovStatistics(uint64(m.EventsInProgress))
	}
	if m.EventsAcknowledged != 0 {
		n += 1 + sovStatistics(uint64(m.EventsAcknowledged))
	}
	return n
}

func (m *TaskStatistics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStatistics(uint64(l))
	}
	l = len(m.URI)
	if l > 0 {
		n += 1 + l + sovStatistics(uint64(l))
	}
	if len(m.Inputs) > 0 {
		for _, e := range m.Inputs {
			l = e.Size()
			n += 1 + l + sovStatistics(uint64(l))
		}
	}
	if len(m.Outputs) > 0 {
		for _, e := range m.Outputs {
			l = e.Size()
			n += 1 + l + sovStatistics(uint64(l))
		}
	}
	if m.SnapshotsWaiting != 0 {
		n += 1 + sovStatistics(uint64(m.SnapshotsWaiting))
	}
	if m.SnapshotsInProgress != 0 {
		n += 1 + sovStatistics(uint64(m.SnapshotsInProgress))
	}
	if m.SnapshotsSucceeded != 0 {
		n += 1 + sovStatistics(uint64(m.SnapshotsSucceeded))
	}
	if m.SnapshotsFailed != 0 {
		n += 1 + sovStatistics(uint64(m.SnapshotsFailed))
	}
	return n
}

func (m *TaskInputStatistics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStatistics(uint64(l))
	}
	if m.EventsReceived != 0 {
		n += 1 + sovStatistics(uint64(m.EventsReceived))
	}
	if m.EventsInProgress != 0 {
		n += 1 + sovStatistics(uint64(m.EventsInProgress))
	}
	if m.EventsProcessed != 0 {
		n += 1 + sovStatistics(uint64(m.EventsProcessed))
	}
	if m.EventsSkipped != 0 {
		n += 1 + sovStatistics(uint64(m.EventsSkipped))
	}
	return n
}

func (m *TaskOutputStatistics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStatistics(uint64(l))
	}
	if m.EventsPublished != 0 {
		n += 1 + sovStatistics(uint64(m.EventsPublished))
	}
	return n
}

func sovStatistics(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozStatistics(x uint64) (n int) {
	return sovStatistics(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LinkStatistics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatistics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LinkStatistics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LinkStatistics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatistics
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatistics
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventsWaiting", wireType)
			}
			m.EventsWaiting = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventsWaiting |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventsInProgress", wireType)
			}
			m.EventsInProgress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventsInProgress |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventsAcknowledged", wireType)
			}
			m.EventsAcknowledged = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventsAcknowledged |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStatistics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStatistics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskStatistics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatistics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskStatistics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskStatistics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatistics
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatistics
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatistics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inputs = append(m.Inputs, &TaskInputStatistics{})
			if err := m.Inputs[len(m.Inputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatistics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Outputs = append(m.Outputs, &TaskOutputStatistics{})
			if err := m.Outputs[len(m.Outputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotsWaiting", wireType)
			}
			m.SnapshotsWaiting = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SnapshotsWaiting |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotsInProgress", wireType)
			}
			m.SnapshotsInProgress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SnapshotsInProgress |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotsSucceeded", wireType)
			}
			m.SnapshotsSucceeded = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SnapshotsSucceeded |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotsFailed", wireType)
			}
			m.SnapshotsFailed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SnapshotsFailed |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStatistics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStatistics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskInputStatistics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatistics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskInputStatistics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskInputStatistics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatistics
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventsReceived", wireType)
			}
			m.EventsReceived = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventsReceived |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventsInProgress", wireType)
			}
			m.EventsInProgress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventsInProgress |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventsProcessed", wireType)
			}
			m.EventsProcessed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventsProcessed |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventsSkipped", wireType)
			}
			m.EventsSkipped = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventsSkipped |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStatistics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStatistics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskOutputStatistics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatistics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskOutputStatistics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskOutputStatistics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatistics
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventsPublished", wireType)
			}
			m.EventsPublished = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventsPublished |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStatistics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStatistics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStatistics(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStatistics
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStatistics
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStatistics
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthStatistics
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowStatistics
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipStatistics(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthStatistics = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStatistics   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("statistics.proto", fileDescriptor_statistics_9e952b5e5dddf5a2) }

var fileDescriptor_statistics_9e952b5e5dddf5a2 = []byte{
	// 676 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xcd, 0x4e, 0xdb, 0x40,
	0x10, 0x26, 0x38, 0x24, 0x74, 0x11, 0x21, 0x6c, 0x80, 0xba, 0xa8, 0xb5, 0x51, 0x4e, 0x5c, 0xb0,
	0x2b, 0xb8, 0x54, 0xaa, 0x84, 0x94, 0x48, 0xb4, 0x4a, 0x5b, 0x15, 0xe4, 0xb4, 0xaa, 0xd4, 0x0b,
	0xda, 0xd8, 0x8b, 0x59, 0xec, 0x78, 0x2d, 0xef, 0x1a, 0xc4, 0x5b, 0xf0, 0x14, 0x3d, 0xf6, 0x39,
	0x7a, 0xe4, 0xd8, 0x93, 0x55, 0x99, 0x6b, 0x1f, 0xa2, 0xf2, 0xfa, 0x6f, 0x13, 0xa8, 0x50, 0xa5,
	0x5e, 0xa2, 0xcc, 0xf7, 0xed, 0x7c, 0x33, 0xde, 0x6f, 0x66, 0x41, 0x97, 0x71, 0xc4, 0x09, 0xe3,
	0xc4, 0x66, 0x46, 0x18, 0x51, 0x4e, 0xe1, 0x32, 0x8f, 0x90, 0xed, 0x91, 0xc0, 0xdd, 0x3e, 0x70,
	0x09, 0x3f, 0x8f, 0x27, 0x86, 0x4d, 0xa7, 0xa6, 0x4b, 0x7d, 0x14, 0xb8, 0xa6, 0x38, 0x32, 0x89,
	0xcf, 0xcc, 0x90, 0x5f, 0x87, 0x98, 0x99, 0x78, 0x1a, 0xf2, 0xeb, 0xfc, 0x37, 0x4f, 0xdf, 0xde,
	0x9b, 0x49, 0x72, 0x69, 0x9d, 0x92, 0x45, 0x22, 0x10, 0xff, 0xf2, 0xe3, 0xfd, 0x9b, 0x45, 0xd0,
	0xf9, 0x40, 0x02, 0x6f, 0x5c, 0xb5, 0x01, 0x9f, 0x83, 0x66, 0x80, 0xa6, 0x58, 0x6d, 0xec, 0x34,
	0x76, 0x9f, 0x0c, 0x97, 0xd3, 0x44, 0x6f, 0x7e, 0x44, 0x53, 0x6c, 0x09, 0x14, 0x3e, 0x03, 0x4a,
	0x1c, 0x11, 0x75, 0x51, 0x90, 0xed, 0x34, 0xd1, 0x95, 0xcf, 0xd6, 0xc8, 0xca, 0x30, 0xf8, 0x0a,
	0x74, 0xf0, 0x25, 0x0e, 0x38, 0x3b, 0xbd, 0x42, 0x84, 0x93, 0xc0, 0x55, 0x95, 0x9d, 0xc6, 0xae,
	0x32, 0x5c, 0x4f, 0x13, 0x7d, 0xf5, 0x48, 0x30, 0x5f, 0x72, 0xc2, 0x5a, 0xc5, 0x72, 0x08, 0x87,
	0x00, 0x16, 0x99, 0x24, 0x38, 0x0d, 0x23, 0xea, 0x46, 0x98, 0x31, 0xb5, 0x29, 0xb2, 0x37, 0xd2,
	0x44, 0xef, 0xe6, 0xd9, 0xa3, 0xe0, 0xa4, 0xe0, 0xac, 0x2e, 0x9e, 0x43, 0xe0, 0x5b, 0xd0, 0x2b,
	0x34, 0x90, 0xed, 0x05, 0xf4, 0xca, 0xc7, 0x8e, 0x8b, 0x1d, 0x75, 0x49, 0x88, 0x6c, 0xa5, 0x89,
	0x0e, 0x73, 0x91, 0x81, 0xc4, 0x5a, 0x45, 0x59, 0x19, 0xeb, 0xff, 0x56, 0x40, 0xe7, 0x13, 0x62,
	0xff, 0xe5, 0x4a, 0x06, 0xa0, 0x45, 0x82, 0x30, 0xe6, 0x4c, 0x55, 0x76, 0x94, 0xdd, 0x95, 0xfd,
	0x17, 0x46, 0xe9, 0xae, 0x91, 0x95, 0x18, 0x65, 0x5c, 0x5d, 0x67, 0x08, 0xd2, 0x44, 0x6f, 0x09,
	0x90, 0x59, 0x45, 0x22, 0x3c, 0x02, 0x6d, 0x1a, 0x73, 0xa1, 0xd1, 0x14, 0x1a, 0xda, 0xac, 0xc6,
	0xb1, 0x20, 0x25, 0x91, 0x95, 0x34, 0xd1, 0xdb, 0x39, 0xca, 0xac, 0x32, 0x17, 0x0e, 0xc0, 0x3a,
	0x0b, 0x50, 0xc8, 0xce, 0xa9, 0xe4, 0xcf, 0x52, 0x7d, 0xc3, 0xe3, 0x92, 0x2c, 0x2d, 0xea, 0xb2,
	0x39, 0x04, 0xbe, 0x07, 0x9b, 0xb5, 0x84, 0x6c, 0x54, 0x4b, 0xc8, 0x3c, 0x4d, 0x13, 0xbd, 0x57,
	0xc9, 0x48, 0x5e, 0xf5, 0xd8, 0x7d, 0x30, 0xb3, 0xab, 0x16, 0x63, 0xb1, 0x6d, 0x63, 0xec, 0x60,
	0x47, 0x6d, 0xd7, 0x76, 0x55, 0x52, 0xe3, 0x92, 0xb5, 0x20, 0xbb, 0x87, 0xc1, 0x43, 0x50, 0x77,
	0x7a, 0x7a, 0x86, 0x88, 0x8f, 0x1d, 0x75, 0x59, 0xa8, 0xf4, 0xd2, 0x44, 0x5f, 0xab, 0x54, 0xde,
	0x08, 0xca, 0x5a, 0x63, 0xb3, 0x40, 0xff, 0xfb, 0x22, 0xe8, 0x3d, 0xe0, 0xc5, 0x23, 0x9e, 0xbf,
	0x06, 0x6b, 0xc5, 0xb4, 0x45, 0xd8, 0xc6, 0xe4, 0x12, 0x3b, 0xc2, 0x7f, 0x65, 0x08, 0xd3, 0x44,
	0xef, 0xe4, 0x93, 0x66, 0x15, 0x8c, 0x55, 0xac, 0x45, 0x19, 0xff, 0x65, 0xdc, 0x95, 0x7f, 0x1a,
	0xf7, 0x43, 0x50, 0x60, 0x99, 0x80, 0x8d, 0x19, 0xc3, 0x4e, 0xb1, 0x30, 0xe2, 0xb3, 0x73, 0x85,
	0x93, 0x92, 0xb2, 0x8a, 0x6e, 0x2b, 0x40, 0x5a, 0x56, 0xe6, 0x91, 0x30, 0xac, 0x36, 0x45, 0x5a,
	0xd6, 0x71, 0x4e, 0x94, 0xcb, 0x5a, 0x84, 0x7d, 0x0e, 0x36, 0x1e, 0x9a, 0xbb, 0x47, 0x2e, 0x4c,
	0xea, 0x37, 0x9e, 0xf8, 0x84, 0x9d, 0x57, 0x37, 0x26, 0xf7, 0x5b, 0x52, 0x55, 0xbf, 0x25, 0xb0,
	0xff, 0xad, 0x01, 0x3a, 0x75, 0xb1, 0x31, 0x09, 0x3c, 0x38, 0x02, 0x9b, 0x05, 0x3f, 0xf7, 0x82,
	0xa9, 0xf5, 0x86, 0xcc, 0x32, 0xdb, 0x5b, 0x86, 0x4b, 0xa9, 0xeb, 0x63, 0xa3, 0x7c, 0x15, 0x8d,
	0xa3, 0xec, 0xed, 0x94, 0xa4, 0xe6, 0x36, 0x5f, 0x9d, 0x5d, 0xb6, 0xc7, 0xa5, 0x86, 0xef, 0x7e,
	0xa4, 0x5a, 0xe3, 0x36, 0xd5, 0x1a, 0xbf, 0x52, 0xad, 0x71, 0x73, 0xa7, 0x2d, 0xdc, 0xde, 0x69,
	0x0b, 0x3f, 0xef, 0xb4, 0x85, 0xaf, 0x2f, 0xa5, 0xa7, 0x79, 0xe0, 0x5f, 0xa0, 0x49, 0x34, 0x3a,
	0x36, 0x3d, 0x8a, 0xfc, 0x0b, 0xb4, 0x47, 0x43, 0x1c, 0x21, 0x4e, 0x23, 0x33, 0xf4, 0x5c, 0xb3,
	0x2c, 0x39, 0x69, 0x09, 0xed, 0x83, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x8b, 0xf2, 0x87, 0x1b,
	0x26, 0x06, 0x00, 0x00,
}
