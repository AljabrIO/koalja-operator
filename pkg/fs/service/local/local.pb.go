// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: local.proto

package local // import "github.com/AljabrIO/koalja-operator/pkg/fs/service/local"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import fs "github.com/AljabrIO/koalja-operator/pkg/fs"
import empty "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RegisterNodeRequest struct {
	// Name of the Node.
	Name string `protobuf:"bytes,1,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
	// Address of the Node API.
	NodeAddress          string   `protobuf:"bytes,2,opt,name=NodeAddress,json=nodeAddress,proto3" json:"NodeAddress,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterNodeRequest) Reset()         { *m = RegisterNodeRequest{} }
func (m *RegisterNodeRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterNodeRequest) ProtoMessage()    {}
func (*RegisterNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_local_26a45c35cdfca99b, []int{0}
}
func (m *RegisterNodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterNodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RegisterNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterNodeRequest.Merge(dst, src)
}
func (m *RegisterNodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegisterNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterNodeRequest proto.InternalMessageInfo

func (m *RegisterNodeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RegisterNodeRequest) GetNodeAddress() string {
	if m != nil {
		return m.NodeAddress
	}
	return ""
}

type CreateFileViewRequest struct {
	// The path of the node of the file to create a view for
	LocalPath string `protobuf:"bytes,1,opt,name=LocalPath,json=localPath,proto3" json:"LocalPath,omitempty"`
	// If set, a small preview is returned instead of the full content
	Preview              bool     `protobuf:"varint,2,opt,name=Preview,json=preview,proto3" json:"Preview,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateFileViewRequest) Reset()         { *m = CreateFileViewRequest{} }
func (m *CreateFileViewRequest) String() string { return proto.CompactTextString(m) }
func (*CreateFileViewRequest) ProtoMessage()    {}
func (*CreateFileViewRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_local_26a45c35cdfca99b, []int{1}
}
func (m *CreateFileViewRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateFileViewRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateFileViewRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CreateFileViewRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateFileViewRequest.Merge(dst, src)
}
func (m *CreateFileViewRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateFileViewRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateFileViewRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateFileViewRequest proto.InternalMessageInfo

func (m *CreateFileViewRequest) GetLocalPath() string {
	if m != nil {
		return m.LocalPath
	}
	return ""
}

func (m *CreateFileViewRequest) GetPreview() bool {
	if m != nil {
		return m.Preview
	}
	return false
}

func init() {
	proto.RegisterType((*RegisterNodeRequest)(nil), "local.RegisterNodeRequest")
	proto.RegisterType((*CreateFileViewRequest)(nil), "local.CreateFileViewRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NodeRegistryClient is the client API for NodeRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeRegistryClient interface {
	// CreateFileView returns a view on the given file identified by the given URI.
	RegisterNode(ctx context.Context, in *RegisterNodeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type nodeRegistryClient struct {
	cc *grpc.ClientConn
}

func NewNodeRegistryClient(cc *grpc.ClientConn) NodeRegistryClient {
	return &nodeRegistryClient{cc}
}

func (c *nodeRegistryClient) RegisterNode(ctx context.Context, in *RegisterNodeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/local.NodeRegistry/RegisterNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeRegistryServer is the server API for NodeRegistry service.
type NodeRegistryServer interface {
	// CreateFileView returns a view on the given file identified by the given URI.
	RegisterNode(context.Context, *RegisterNodeRequest) (*empty.Empty, error)
}

func RegisterNodeRegistryServer(s *grpc.Server, srv NodeRegistryServer) {
	s.RegisterService(&_NodeRegistry_serviceDesc, srv)
}

func _NodeRegistry_RegisterNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRegistryServer).RegisterNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/local.NodeRegistry/RegisterNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRegistryServer).RegisterNode(ctx, req.(*RegisterNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "local.NodeRegistry",
	HandlerType: (*NodeRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterNode",
			Handler:    _NodeRegistry_RegisterNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "local.proto",
}

// NodeClient is the client API for Node service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeClient interface {
	// CreateFileView returns a view on the given file identified by the given URI.
	CreateFileView(ctx context.Context, in *CreateFileViewRequest, opts ...grpc.CallOption) (*fs.CreateFileViewResponse, error)
}

type nodeClient struct {
	cc *grpc.ClientConn
}

func NewNodeClient(cc *grpc.ClientConn) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) CreateFileView(ctx context.Context, in *CreateFileViewRequest, opts ...grpc.CallOption) (*fs.CreateFileViewResponse, error) {
	out := new(fs.CreateFileViewResponse)
	err := c.cc.Invoke(ctx, "/local.Node/CreateFileView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServer is the server API for Node service.
type NodeServer interface {
	// CreateFileView returns a view on the given file identified by the given URI.
	CreateFileView(context.Context, *CreateFileViewRequest) (*fs.CreateFileViewResponse, error)
}

func RegisterNodeServer(s *grpc.Server, srv NodeServer) {
	s.RegisterService(&_Node_serviceDesc, srv)
}

func _Node_CreateFileView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFileViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).CreateFileView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/local.Node/CreateFileView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).CreateFileView(ctx, req.(*CreateFileViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Node_serviceDesc = grpc.ServiceDesc{
	ServiceName: "local.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFileView",
			Handler:    _Node_CreateFileView_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "local.proto",
}

func (m *RegisterNodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterNodeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLocal(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.NodeAddress) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLocal(dAtA, i, uint64(len(m.NodeAddress)))
		i += copy(dAtA[i:], m.NodeAddress)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CreateFileViewRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateFileViewRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LocalPath) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLocal(dAtA, i, uint64(len(m.LocalPath)))
		i += copy(dAtA[i:], m.LocalPath)
	}
	if m.Preview {
		dAtA[i] = 0x10
		i++
		if m.Preview {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintLocal(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RegisterNodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLocal(uint64(l))
	}
	l = len(m.NodeAddress)
	if l > 0 {
		n += 1 + l + sovLocal(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateFileViewRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LocalPath)
	if l > 0 {
		n += 1 + l + sovLocal(uint64(l))
	}
	if m.Preview {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovLocal(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLocal(x uint64) (n int) {
	return sovLocal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RegisterNodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterNodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterNodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLocal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateFileViewRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateFileViewRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateFileViewRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Preview", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Preview = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLocal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLocal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLocal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLocal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthLocal
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLocal
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLocal(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLocal = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLocal   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("local.proto", fileDescriptor_local_26a45c35cdfca99b) }

var fileDescriptor_local_26a45c35cdfca99b = []byte{
	// 337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x51, 0xc1, 0x4e, 0x32, 0x31,
	0x18, 0xfc, 0xf7, 0x0f, 0x8a, 0x14, 0xe2, 0xa1, 0x46, 0x43, 0x36, 0x64, 0x43, 0x38, 0x79, 0xb1,
	0x4d, 0xe0, 0xe2, 0x15, 0x8c, 0x26, 0xa2, 0x01, 0xb2, 0x07, 0x0f, 0xde, 0xba, 0xf0, 0x6d, 0x59,
	0xe8, 0x6e, 0x6b, 0x5b, 0x20, 0xbc, 0x89, 0x8f, 0xe4, 0xd1, 0x47, 0x30, 0xf8, 0x22, 0x66, 0xbb,
	0x10, 0x25, 0x72, 0xf1, 0xd2, 0xe4, 0xfb, 0xa6, 0x33, 0x9d, 0x99, 0xa2, 0xaa, 0x90, 0x63, 0x26,
	0x88, 0xd2, 0xd2, 0x4a, 0x7c, 0xe4, 0x06, 0xbf, 0xc3, 0x13, 0x3b, 0x5d, 0x44, 0x64, 0x2c, 0x53,
	0xca, 0xa5, 0x60, 0x19, 0xa7, 0x0e, 0x8f, 0x16, 0x31, 0x55, 0x76, 0xad, 0xc0, 0x50, 0x48, 0x95,
	0x5d, 0x17, 0x67, 0xc1, 0xdd, 0x23, 0x75, 0xc5, 0x8c, 0x45, 0xfa, 0x7e, 0x48, 0xe7, 0x92, 0x89,
	0x19, 0xbb, 0x92, 0x0a, 0x34, 0xb3, 0x52, 0x53, 0x35, 0xe7, 0x34, 0x36, 0x34, 0x36, 0x05, 0xa9,
	0xf5, 0x80, 0xce, 0x42, 0xe0, 0x89, 0xb1, 0xa0, 0x07, 0x72, 0x02, 0x21, 0xbc, 0x2c, 0xc0, 0x58,
	0x8c, 0x51, 0x69, 0xc0, 0x52, 0xa8, 0x7b, 0x4d, 0xef, 0xb2, 0x12, 0x96, 0x32, 0x96, 0x02, 0x6e,
	0xa2, 0x6a, 0x7e, 0xa5, 0x3b, 0x99, 0x68, 0x30, 0xa6, 0xfe, 0xdf, 0x41, 0xd5, 0xec, 0x7b, 0xd5,
	0x1a, 0xa2, 0xf3, 0x1b, 0x0d, 0xcc, 0xc2, 0x5d, 0x22, 0xe0, 0x29, 0x81, 0xd5, 0x4e, 0xae, 0x81,
	0x2a, 0x8f, 0x79, 0xb0, 0x11, 0xb3, 0xd3, 0xad, 0x66, 0x45, 0xec, 0x16, 0xb8, 0x8e, 0xca, 0x23,
	0x0d, 0xcb, 0x04, 0x56, 0x4e, 0xf4, 0x24, 0x2c, 0xab, 0x62, 0x6c, 0x87, 0xa8, 0x56, 0xb8, 0xca,
	0x1d, 0xea, 0x35, 0xee, 0xa1, 0xda, 0x4f, 0xb7, 0xd8, 0x27, 0x45, 0x79, 0x07, 0x22, 0xf8, 0x17,
	0x84, 0x4b, 0xc9, 0x05, 0x90, 0x5d, 0x73, 0xe4, 0x36, 0x2f, 0xab, 0x1d, 0xa2, 0x92, 0xe3, 0xf6,
	0xd1, 0xe9, 0xbe, 0x59, 0xdc, 0xd8, 0xaa, 0x1d, 0xcc, 0xe0, 0xfb, 0x24, 0x36, 0xbf, 0x20, 0xa3,
	0x64, 0x66, 0xa0, 0xd7, 0x7f, 0xdb, 0x04, 0xde, 0xfb, 0x26, 0xf0, 0x3e, 0x36, 0x81, 0xf7, 0xfa,
	0x19, 0xfc, 0x7b, 0xbe, 0xfe, 0xc3, 0x67, 0x18, 0xd0, 0xcb, 0x64, 0x0c, 0xd4, 0xbd, 0x1e, 0x1d,
	0x3b, 0xbf, 0x9d, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6c, 0xe8, 0xa3, 0xa1, 0x18, 0x02, 0x00,
	0x00,
}
