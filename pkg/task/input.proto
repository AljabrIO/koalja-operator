// 
// Copyright Â© 2018 Aljabr, Inc.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// 

syntax = "proto3";

package task;

option go_package = "github.com/AljabrIO/koalja-operator/pkg/task";

import "github.com/golang/protobuf/ptypes/duration/duration.proto";
import "github.com/golang/protobuf/ptypes/empty/empty.proto";
import "github.com/AljabrIO/koalja-operator/pkg/annotatedvalue/annotatedvalue.proto";

// SnapshotService is the API used by task executors to query the
// task agent for the availability of a new snapshot.
service SnapshotService {
    // Next pulls the task agent for the next available snapshot.
    rpc Next(NextRequest) returns (NextResponse);
    // Acknowledge the processing of a snapshot
    rpc Ack(AckRequest) returns (google.protobuf.Empty);
}

message NextRequest {
    // WaitTimeout is the maximum amount of time that the called
    // is prepared to wait for an answer.
    google.protobuf.Duration WaitTimeout = 1;
}

message NextResponse {
    // If set, Snapshot holds the next snapshot.
    Snapshot Snapshot = 1;
    // If Snapshot is not set, NoSnapshotYet is set to true to indicate
    // that was is no snapshot available within the timeout specified
    // in the request.
    bool NoSnapshotYet = 2;
}

message AckRequest {
    string SnapshotID = 1;
}

// Snapshot is a set of sequences of annotated values for every
// input of a task.
message Snapshot {
    string ID = 1;
    repeated SnapshotInputPair Inputs = 2;
}

// SnapshotInputPair is a sequences of annotated value for a specific
// task input with given name.
message SnapshotInputPair {
    string InputName = 1;
    repeated annotatedvalue.AnnotatedValue AnnotatedValues = 2;
}